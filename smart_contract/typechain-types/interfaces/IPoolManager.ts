/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PoolKeyStruct = {
  currency0: PromiseOrValue<string>;
  currency1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
  tickSpacing: PromiseOrValue<BigNumberish>;
  hooks: PromiseOrValue<string>;
};

export type PoolKeyStructOutput = [string, string, number, number, string] & {
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
};

export type ModifyLiquidityParamsStruct = {
  tickLower: PromiseOrValue<BigNumberish>;
  tickUpper: PromiseOrValue<BigNumberish>;
  liquidityDelta: PromiseOrValue<BigNumberish>;
  salt: PromiseOrValue<BytesLike>;
};

export type ModifyLiquidityParamsStructOutput = [
  number,
  number,
  BigNumber,
  string
] & {
  tickLower: number;
  tickUpper: number;
  liquidityDelta: BigNumber;
  salt: string;
};

export type SwapParamsStruct = {
  zeroForOne: PromiseOrValue<boolean>;
  amountSpecified: PromiseOrValue<BigNumberish>;
  sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
};

export type SwapParamsStructOutput = [boolean, BigNumber, BigNumber] & {
  zeroForOne: boolean;
  amountSpecified: BigNumber;
  sqrtPriceLimitX96: BigNumber;
};

export interface IPoolManagerInterface extends utils.Interface {
  functions: {
    "allowance(address,address,uint256)": FunctionFragment;
    "approve(address,uint256,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "clear(address,uint256)": FunctionFragment;
    "collectProtocolFees(address,address,uint256)": FunctionFragment;
    "createAndInitializePool(address,address,uint24,int24,uint160)": FunctionFragment;
    "donate((address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "extsload(bytes32)": FunctionFragment;
    "extsload(bytes32,uint256)": FunctionFragment;
    "extsload(bytes32[])": FunctionFragment;
    "exttload(bytes32[])": FunctionFragment;
    "exttload(bytes32)": FunctionFragment;
    "getPool(address,address,uint24,int24)": FunctionFragment;
    "initialize((address,address,uint24,int24,address),uint160)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "modifyLiquidity((address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": FunctionFragment;
    "protocolFeeController()": FunctionFragment;
    "protocolFeesAccrued(address)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setProtocolFee((address,address,uint24,int24,address),uint24)": FunctionFragment;
    "setProtocolFeeController(address)": FunctionFragment;
    "settle()": FunctionFragment;
    "settleFor(address)": FunctionFragment;
    "swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes)": FunctionFragment;
    "sync(address)": FunctionFragment;
    "take(address,address,uint256)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256,uint256)": FunctionFragment;
    "unlock(bytes)": FunctionFragment;
    "updateDynamicLPFee((address,address,uint24,int24,address),uint24)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "clear"
      | "collectProtocolFees"
      | "createAndInitializePool"
      | "donate"
      | "extsload(bytes32)"
      | "extsload(bytes32,uint256)"
      | "extsload(bytes32[])"
      | "exttload(bytes32[])"
      | "exttload(bytes32)"
      | "getPool"
      | "initialize"
      | "isOperator"
      | "mint"
      | "modifyLiquidity"
      | "protocolFeeController"
      | "protocolFeesAccrued"
      | "setOperator"
      | "setProtocolFee"
      | "setProtocolFeeController"
      | "settle"
      | "settleFor"
      | "swap"
      | "sync"
      | "take"
      | "transfer"
      | "transferFrom"
      | "unlock"
      | "updateDynamicLPFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clear",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndInitializePool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [
      PoolKeyStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extsload(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "extsload(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extsload(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exttload(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exttload(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PoolKeyStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLiquidity",
    values: [
      PoolKeyStruct,
      ModifyLiquidityParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeesAccrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PoolKeyStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settleFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [PoolKeyStruct, SwapParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDynamicLPFee",
    values: [PoolKeyStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndInitializePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extsload(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extsload(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extsload(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exttload(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exttload(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDynamicLPFee",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256,uint256)": EventFragment;
    "Donate(bytes32,address,uint256,uint256)": EventFragment;
    "Initialize(bytes32,address,address,uint24,int24,address,uint160,int24)": EventFragment;
    "ModifyLiquidity(bytes32,address,int24,int24,int256,bytes32)": EventFragment;
    "OperatorSet(address,address,bool)": EventFragment;
    "ProtocolFeeControllerUpdated(address)": EventFragment;
    "ProtocolFeeUpdated(bytes32,uint24)": EventFragment;
    "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)": EventFragment;
    "Transfer(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeeControllerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DonateEventObject {
  id: string;
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type DonateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DonateEventObject
>;

export type DonateEventFilter = TypedEventFilter<DonateEvent>;

export interface InitializeEventObject {
  id: string;
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
  sqrtPriceX96: BigNumber;
  tick: number;
}
export type InitializeEvent = TypedEvent<
  [string, string, string, number, number, string, BigNumber, number],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface ModifyLiquidityEventObject {
  id: string;
  sender: string;
  tickLower: number;
  tickUpper: number;
  liquidityDelta: BigNumber;
  salt: string;
}
export type ModifyLiquidityEvent = TypedEvent<
  [string, string, number, number, BigNumber, string],
  ModifyLiquidityEventObject
>;

export type ModifyLiquidityEventFilter = TypedEventFilter<ModifyLiquidityEvent>;

export interface OperatorSetEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type OperatorSetEvent = TypedEvent<
  [string, string, boolean],
  OperatorSetEventObject
>;

export type OperatorSetEventFilter = TypedEventFilter<OperatorSetEvent>;

export interface ProtocolFeeControllerUpdatedEventObject {
  protocolFeeController: string;
}
export type ProtocolFeeControllerUpdatedEvent = TypedEvent<
  [string],
  ProtocolFeeControllerUpdatedEventObject
>;

export type ProtocolFeeControllerUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeControllerUpdatedEvent>;

export interface ProtocolFeeUpdatedEventObject {
  id: string;
  protocolFee: number;
}
export type ProtocolFeeUpdatedEvent = TypedEvent<
  [string, number],
  ProtocolFeeUpdatedEventObject
>;

export type ProtocolFeeUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeUpdatedEvent>;

export interface SwapEventObject {
  id: string;
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
  sqrtPriceX96: BigNumber;
  liquidity: BigNumber;
  tick: number;
  fee: number;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number, number],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TransferEventObject {
  caller: string;
  from: string;
  to: string;
  id: BigNumber;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IPoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clear(
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAndInitializePool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "extsload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "extsload(bytes32,uint256)"(
      startSlot: PromiseOrValue<BytesLike>,
      nSlots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    "extsload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    "exttload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    "exttload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOperator(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { approved: boolean }>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyLiquidity(
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protocolFeeController(overrides?: CallOverrides): Promise<[string]>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    setOperator(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleFor(
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sync(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    take(
      currency: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transfer(
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlock(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDynamicLPFee(
      key: PoolKeyStruct,
      newDynamicLPFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clear(
    currency: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFees(
    recipient: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAndInitializePool(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    sqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    key: PoolKeyStruct,
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "extsload(bytes32)"(
    slot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "extsload(bytes32,uint256)"(
    startSlot: PromiseOrValue<BytesLike>,
    nSlots: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "extsload(bytes32[])"(
    slots: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "exttload(bytes32[])"(
    slots: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "exttload(bytes32)"(
    slot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPool(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    key: PoolKeyStruct,
    sqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOperator(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyLiquidity(
    key: PoolKeyStruct,
    params: ModifyLiquidityParamsStruct,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protocolFeeController(overrides?: CallOverrides): Promise<string>;

  protocolFeesAccrued(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOperator(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    key: PoolKeyStruct,
    newProtocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleFor(
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    key: PoolKeyStruct,
    params: SwapParamsStruct,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sync(
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  take(
    currency: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transfer(
    receiver: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlock(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDynamicLPFee(
    key: PoolKeyStruct,
    newDynamicLPFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    clear(
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAndInitializePool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    donate(
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "extsload(bytes32,uint256)"(
      startSlot: PromiseOrValue<BytesLike>,
      nSlots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "extsload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "exttload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "exttload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    isOperator(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyLiquidity(
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        callerDelta: BigNumber;
        feesAccrued: BigNumber;
      }
    >;

    protocolFeeController(overrides?: CallOverrides): Promise<string>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(overrides?: CallOverrides): Promise<BigNumber>;

    settleFor(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sync(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    take(
      currency: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlock(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateDynamicLPFee(
      key: PoolKeyStruct,
      newDynamicLPFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ApprovalEventFilter;

    "Donate(bytes32,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null
    ): DonateEventFilter;
    Donate(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null
    ): DonateEventFilter;

    "Initialize(bytes32,address,address,uint24,int24,address,uint160,int24)"(
      id?: PromiseOrValue<BytesLike> | null,
      currency0?: PromiseOrValue<string> | null,
      currency1?: PromiseOrValue<string> | null,
      fee?: null,
      tickSpacing?: null,
      hooks?: null,
      sqrtPriceX96?: null,
      tick?: null
    ): InitializeEventFilter;
    Initialize(
      id?: PromiseOrValue<BytesLike> | null,
      currency0?: PromiseOrValue<string> | null,
      currency1?: PromiseOrValue<string> | null,
      fee?: null,
      tickSpacing?: null,
      hooks?: null,
      sqrtPriceX96?: null,
      tick?: null
    ): InitializeEventFilter;

    "ModifyLiquidity(bytes32,address,int24,int24,int256,bytes32)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      salt?: null
    ): ModifyLiquidityEventFilter;
    ModifyLiquidity(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null,
      salt?: null
    ): ModifyLiquidityEventFilter;

    "OperatorSet(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): OperatorSetEventFilter;
    OperatorSet(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): OperatorSetEventFilter;

    "ProtocolFeeControllerUpdated(address)"(
      protocolFeeController?: PromiseOrValue<string> | null
    ): ProtocolFeeControllerUpdatedEventFilter;
    ProtocolFeeControllerUpdated(
      protocolFeeController?: PromiseOrValue<string> | null
    ): ProtocolFeeControllerUpdatedEventFilter;

    "ProtocolFeeUpdated(bytes32,uint24)"(
      id?: PromiseOrValue<BytesLike> | null,
      protocolFee?: null
    ): ProtocolFeeUpdatedEventFilter;
    ProtocolFeeUpdated(
      id?: PromiseOrValue<BytesLike> | null,
      protocolFee?: null
    ): ProtocolFeeUpdatedEventFilter;

    "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      sqrtPriceX96?: null,
      liquidity?: null,
      tick?: null,
      fee?: null
    ): SwapEventFilter;
    Swap(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      sqrtPriceX96?: null,
      liquidity?: null,
      tick?: null,
      fee?: null
    ): SwapEventFilter;

    "Transfer(address,address,address,uint256,uint256)"(
      caller?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      caller?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clear(
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAndInitializePool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "extsload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32,uint256)"(
      startSlot: PromiseOrValue<BytesLike>,
      nSlots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exttload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exttload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOperator(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyLiquidity(
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protocolFeeController(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleFor(
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sync(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    take(
      currency: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transfer(
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlock(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDynamicLPFee(
      key: PoolKeyStruct,
      newDynamicLPFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clear(
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAndInitializePool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32,uint256)"(
      startSlot: PromiseOrValue<BytesLike>,
      nSlots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exttload(bytes32[])"(
      slots: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exttload(bytes32)"(
      slot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOperator(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyLiquidity(
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protocolFeeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleFor(
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sync(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    take(
      currency: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDynamicLPFee(
      key: PoolKeyStruct,
      newDynamicLPFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
