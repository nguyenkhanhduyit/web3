/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PoolKeyStruct = {
  currency0: PromiseOrValue<string>;
  currency1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
  tickSpacing: PromiseOrValue<BigNumberish>;
  hooks: PromiseOrValue<string>;
};

export type PoolKeyStructOutput = [string, string, number, number, string] & {
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
};

export interface IProtocolFeesInterface extends utils.Interface {
  functions: {
    "collectProtocolFees(address,address,uint256)": FunctionFragment;
    "protocolFeeController()": FunctionFragment;
    "protocolFeesAccrued(address)": FunctionFragment;
    "setProtocolFee((address,address,uint24,int24,address),uint24)": FunctionFragment;
    "setProtocolFeeController(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collectProtocolFees"
      | "protocolFeeController"
      | "protocolFeesAccrued"
      | "setProtocolFee"
      | "setProtocolFeeController"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeesAccrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PoolKeyStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeController",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeController",
    data: BytesLike
  ): Result;

  events: {
    "ProtocolFeeControllerUpdated(address)": EventFragment;
    "ProtocolFeeUpdated(bytes32,uint24)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeeControllerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeUpdated"): EventFragment;
}

export interface ProtocolFeeControllerUpdatedEventObject {
  protocolFeeController: string;
}
export type ProtocolFeeControllerUpdatedEvent = TypedEvent<
  [string],
  ProtocolFeeControllerUpdatedEventObject
>;

export type ProtocolFeeControllerUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeControllerUpdatedEvent>;

export interface ProtocolFeeUpdatedEventObject {
  id: string;
  protocolFee: number;
}
export type ProtocolFeeUpdatedEvent = TypedEvent<
  [string, number],
  ProtocolFeeUpdatedEventObject
>;

export type ProtocolFeeUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeUpdatedEvent>;

export interface IProtocolFees extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProtocolFeesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protocolFeeController(overrides?: CallOverrides): Promise<[string]>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collectProtocolFees(
    recipient: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protocolFeeController(overrides?: CallOverrides): Promise<string>;

  protocolFeesAccrued(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setProtocolFee(
    key: PoolKeyStruct,
    newProtocolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeController(overrides?: CallOverrides): Promise<string>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ProtocolFeeControllerUpdated(address)"(
      protocolFeeController?: PromiseOrValue<string> | null
    ): ProtocolFeeControllerUpdatedEventFilter;
    ProtocolFeeControllerUpdated(
      protocolFeeController?: PromiseOrValue<string> | null
    ): ProtocolFeeControllerUpdatedEventFilter;

    "ProtocolFeeUpdated(bytes32,uint24)"(
      id?: PromiseOrValue<BytesLike> | null,
      protocolFee?: null
    ): ProtocolFeeUpdatedEventFilter;
    ProtocolFeeUpdated(
      id?: PromiseOrValue<BytesLike> | null,
      protocolFee?: null
    ): ProtocolFeeUpdatedEventFilter;
  };

  estimateGas: {
    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protocolFeeController(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectProtocolFees(
      recipient: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protocolFeeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeesAccrued(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      key: PoolKeyStruct,
      newProtocolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
