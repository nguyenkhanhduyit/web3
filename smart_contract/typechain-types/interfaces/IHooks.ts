/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type PoolKeyStruct = {
  currency0: PromiseOrValue<string>;
  currency1: PromiseOrValue<string>;
  fee: PromiseOrValue<BigNumberish>;
  tickSpacing: PromiseOrValue<BigNumberish>;
  hooks: PromiseOrValue<string>;
};

export type PoolKeyStructOutput = [string, string, number, number, string] & {
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
};

export type ModifyLiquidityParamsStruct = {
  tickLower: PromiseOrValue<BigNumberish>;
  tickUpper: PromiseOrValue<BigNumberish>;
  liquidityDelta: PromiseOrValue<BigNumberish>;
  salt: PromiseOrValue<BytesLike>;
};

export type ModifyLiquidityParamsStructOutput = [
  number,
  number,
  BigNumber,
  string
] & {
  tickLower: number;
  tickUpper: number;
  liquidityDelta: BigNumber;
  salt: string;
};

export type SwapParamsStruct = {
  zeroForOne: PromiseOrValue<boolean>;
  amountSpecified: PromiseOrValue<BigNumberish>;
  sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
};

export type SwapParamsStructOutput = [boolean, BigNumber, BigNumber] & {
  zeroForOne: boolean;
  amountSpecified: BigNumber;
  sqrtPriceLimitX96: BigNumber;
};

export interface IHooksInterface extends utils.Interface {
  functions: {
    "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": FunctionFragment;
    "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24)": FunctionFragment;
    "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": FunctionFragment;
    "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes)": FunctionFragment;
    "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": FunctionFragment;
    "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "beforeInitialize(address,(address,address,uint24,int24,address),uint160)": FunctionFragment;
    "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": FunctionFragment;
    "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterAddLiquidity"
      | "afterDonate"
      | "afterInitialize"
      | "afterRemoveLiquidity"
      | "afterSwap"
      | "beforeAddLiquidity"
      | "beforeDonate"
      | "beforeInitialize"
      | "beforeRemoveLiquidity"
      | "beforeSwap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterAddLiquidity",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      ModifyLiquidityParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDonate",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterInitialize",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterRemoveLiquidity",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      ModifyLiquidityParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      SwapParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAddLiquidity",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      ModifyLiquidityParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDonate",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeInitialize",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRemoveLiquidity",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      ModifyLiquidityParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [
      PromiseOrValue<string>,
      PoolKeyStruct,
      SwapParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "afterAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDonate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;

  events: {};
}

export interface IHooks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHooksInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  afterAddLiquidity(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    params: ModifyLiquidityParamsStruct,
    delta: PromiseOrValue<BigNumberish>,
    feesAccrued: PromiseOrValue<BigNumberish>,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterDonate(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterInitialize(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    sqrtPriceX96: PromiseOrValue<BigNumberish>,
    tick: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterRemoveLiquidity(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    params: ModifyLiquidityParamsStruct,
    delta: PromiseOrValue<BigNumberish>,
    feesAccrued: PromiseOrValue<BigNumberish>,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterSwap(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    params: SwapParamsStruct,
    delta: PromiseOrValue<BigNumberish>,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeAddLiquidity(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    params: ModifyLiquidityParamsStruct,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeDonate(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeInitialize(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    sqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeRemoveLiquidity(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    params: ModifyLiquidityParamsStruct,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeSwap(
    sender: PromiseOrValue<string>,
    key: PoolKeyStruct,
    params: SwapParamsStruct,
    hookData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    afterAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    afterDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    afterInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    afterRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    afterSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    beforeAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, number]>;
  };

  filters: {};

  estimateGas: {
    afterAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    afterAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      feesAccrued: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      delta: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeAddLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeDonate(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeInitialize(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeRemoveLiquidity(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: ModifyLiquidityParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeSwap(
      sender: PromiseOrValue<string>,
      key: PoolKeyStruct,
      params: SwapParamsStruct,
      hookData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
