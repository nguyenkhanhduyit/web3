/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TransactionDex {
  export type TransferStructStruct = {
    sender: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
  };

  export type TransferStructStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    sender: string;
    receiver: string;
    value: BigNumber;
    timestamp: BigNumber;
    state: number;
  };
}

export interface TransactionDexInterface extends utils.Interface {
  functions: {
    "getMyTransactionCount()": FunctionFragment;
    "getMyTransactions(uint256,uint256)": FunctionFragment;
    "makeTransaction(address,uint256)": FunctionFragment;
    "pendingWithdrawals(address)": FunctionFragment;
    "withdrawFailed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMyTransactionCount"
      | "getMyTransactions"
      | "makeTransaction"
      | "pendingWithdrawals"
      | "withdrawFailed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMyTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyTransactions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTransaction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFailed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getMyTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFailed",
    data: BytesLike
  ): Result;

  events: {
    "Transfer(address,address,uint256,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface TransferEventObject {
  sender: string;
  receiver: string;
  value: BigNumber;
  timestamp: BigNumber;
  state: number;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, number],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransactionDex extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransactionDexInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMyTransactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMyTransactions(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TransactionDex.TransferStructStructOutput[]]>;

    makeTransaction(
      receiver: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingWithdrawals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMyTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMyTransactions(
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TransactionDex.TransferStructStructOutput[]>;

  makeTransaction(
    receiver: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingWithdrawals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFailed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMyTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMyTransactions(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TransactionDex.TransferStructStructOutput[]>;

    makeTransaction(
      receiver: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingWithdrawals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFailed(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Transfer(address,address,uint256,uint256,uint8)"(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      value?: null,
      timestamp?: null,
      state?: null
    ): TransferEventFilter;
    Transfer(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      value?: null,
      timestamp?: null,
      state?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    getMyTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMyTransactions(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeTransaction(
      receiver: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingWithdrawals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMyTransactionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyTransactions(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeTransaction(
      receiver: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
