/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace LiquidityMining {
  export type PoolStruct = {
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    rewardRate: PromiseOrValue<BigNumberish>;
    totalStaked: PromiseOrValue<BigNumberish>;
    lastUpdateTime: PromiseOrValue<BigNumberish>;
    rewardPerTokenStored: PromiseOrValue<BigNumberish>;
  };

  export type PoolStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    token0: string;
    token1: string;
    rewardRate: BigNumber;
    totalStaked: BigNumber;
    lastUpdateTime: BigNumber;
    rewardPerTokenStored: BigNumber;
  };

  export type UserStakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    rewardPerTokenPaid: PromiseOrValue<BigNumberish>;
    rewards: PromiseOrValue<BigNumberish>;
  };

  export type UserStakeStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    rewardPerTokenPaid: BigNumber;
    rewards: BigNumber;
  };
}

export interface LiquidityMiningInterface extends utils.Interface {
  functions: {
    "addPool(address,address,uint256)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "earned(address,address)": FunctionFragment;
    "endTime()": FunctionFragment;
    "getPoolInfo(address)": FunctionFragment;
    "getUserStake(address,address)": FunctionFragment;
    "pools(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "stake(address,address,uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalRewards()": FunctionFragment;
    "userStakes(address,address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPool"
      | "claimRewards"
      | "earned"
      | "endTime"
      | "getPoolInfo"
      | "getUserStake"
      | "pools"
      | "rewardToken"
      | "stake"
      | "startTime"
      | "totalRewards"
      | "userStakes"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "PoolAdded(address,address,uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "Staked(address,address,address,uint256)": EventFragment;
    "Withdrawn(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface PoolAddedEventObject {
  token0: string;
  token1: string;
  rewardRate: BigNumber;
}
export type PoolAddedEvent = TypedEvent<
  [string, string, BigNumber],
  PoolAddedEventObject
>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface StakedEventObject {
  user: string;
  token0: string;
  token1: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, string, string, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface WithdrawnEventObject {
  user: string;
  token0: string;
  token1: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface LiquidityMining extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityMiningInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earned(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolInfo(
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LiquidityMining.PoolStructOutput]>;

    getUserStake(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LiquidityMining.UserStakeStructOutput]>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token0: string;
        token1: string;
        rewardRate: BigNumber;
        totalStaked: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    stake(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    userStakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPool(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    rewardRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earned(
    user: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolInfo(
    token0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LiquidityMining.PoolStructOutput>;

  getUserStake(
    user: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LiquidityMining.UserStakeStructOutput>;

  pools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token0: string;
      token1: string;
      rewardRate: BigNumber;
      totalStaked: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  stake(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  userStakes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
    }
  >;

  withdraw(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    earned(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LiquidityMining.PoolStructOutput>;

    getUserStake(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LiquidityMining.UserStakeStructOutput>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token0: string;
        token1: string;
        rewardRate: BigNumber;
        totalStaked: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    stake(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    userStakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PoolAdded(address,address,uint256)"(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      rewardRate?: null
    ): PoolAddedEventFilter;
    PoolAdded(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      rewardRate?: null
    ): PoolAddedEventFilter;

    "RewardsClaimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "Staked(address,address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;

    "Withdrawn(address,address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earned(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    userStakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInfo(
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStake(
      user: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userStakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
