/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "TokenApprover",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenApprover__factory>;
    getContractFactory(
      name: "CreatePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreatePool__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "SimpleLiquidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleLiquidity__factory>;
    getContractFactory(
      name: "Transactions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transactions__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "IERC6909Claims",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6909Claims__factory>;
    getContractFactory(
      name: "IExtsload",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtsload__factory>;
    getContractFactory(
      name: "IExttload",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExttload__factory>;
    getContractFactory(
      name: "IHooks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHooks__factory>;
    getContractFactory(
      name: "IPoolManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolManager__factory>;
    getContractFactory(
      name: "IProtocolFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFees__factory>;
    getContractFactory(
      name: "CustomRevert",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomRevert__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "BalanceDeltaLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceDeltaLibrary__factory>;
    getContractFactory(
      name: "BeforeSwapDeltaLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeforeSwapDeltaLibrary__factory>;
    getContractFactory(
      name: "CurrencyLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurrencyLibrary__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "TokenApprover",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenApprover>;
    getContractAt(
      name: "CreatePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CreatePool>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "SimpleLiquidity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleLiquidity>;
    getContractAt(
      name: "Transactions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Transactions>;
    getContractAt(
      name: "IERC20Minimal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minimal>;
    getContractAt(
      name: "IERC6909Claims",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6909Claims>;
    getContractAt(
      name: "IExtsload",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtsload>;
    getContractAt(
      name: "IExttload",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExttload>;
    getContractAt(
      name: "IHooks",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHooks>;
    getContractAt(
      name: "IPoolManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolManager>;
    getContractAt(
      name: "IProtocolFees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFees>;
    getContractAt(
      name: "CustomRevert",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomRevert>;
    getContractAt(
      name: "SafeCast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "BalanceDeltaLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceDeltaLibrary>;
    getContractAt(
      name: "BeforeSwapDeltaLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeforeSwapDeltaLibrary>;
    getContractAt(
      name: "CurrencyLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurrencyLibrary>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
