/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CustomRevert,
  CustomRevertInterface,
} from "../../libraries/CustomRevert";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "reason",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "details",
        type: "bytes",
      },
    ],
    name: "WrappedError",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212204a290e1574428abc8849406598e741319bbb32055a5cce233396575809c8450764736f6c634300081c0033";

type CustomRevertConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomRevertConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CustomRevert__factory extends ContractFactory {
  constructor(...args: CustomRevertConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CustomRevert> {
    return super.deploy(overrides || {}) as Promise<CustomRevert>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CustomRevert {
    return super.attach(address) as CustomRevert;
  }
  override connect(signer: Signer): CustomRevert__factory {
    return super.connect(signer) as CustomRevert__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomRevertInterface {
    return new utils.Interface(_abi) as CustomRevertInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CustomRevert {
    return new Contract(address, _abi, signerOrProvider) as CustomRevert;
  }
}
