/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CurrencyLibrary,
  CurrencyLibraryInterface,
} from "../../../types/Currency.sol/CurrencyLibrary";

const _abi = [
  {
    inputs: [],
    name: "ERC20TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ADDRESS_ZERO",
    outputs: [
      {
        internalType: "Currency",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610119610052600b82828239805160001a6073146045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806366e79509146038575b600080fd5b603e6052565b6040516049919060ca565b60405180910390f35b600081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060966092608e846057565b6077565b6057565b9050919050565b600060a6826081565b9050919050565b600060b682609d565b9050919050565b60c48160ad565b82525050565b600060208201905060dd600083018460bd565b9291505056fea2646970667358221220a64b5cc429201f07b1d858ba3d57846be186e7cedd37f0d22a720a31847606e764736f6c634300081c0033";

type CurrencyLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurrencyLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurrencyLibrary__factory extends ContractFactory {
  constructor(...args: CurrencyLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurrencyLibrary> {
    return super.deploy(overrides || {}) as Promise<CurrencyLibrary>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurrencyLibrary {
    return super.attach(address) as CurrencyLibrary;
  }
  override connect(signer: Signer): CurrencyLibrary__factory {
    return super.connect(signer) as CurrencyLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurrencyLibraryInterface {
    return new utils.Interface(_abi) as CurrencyLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurrencyLibrary {
    return new Contract(address, _abi, signerOrProvider) as CurrencyLibrary;
  }
}
