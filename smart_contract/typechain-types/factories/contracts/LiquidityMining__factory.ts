/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LiquidityMining,
  LiquidityMiningInterface,
} from "../../contracts/LiquidityMining";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_totalRewards",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardRate",
        type: "uint256",
      },
    ],
    name: "PoolAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rewardRate",
        type: "uint256",
      },
    ],
    name: "addPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
    ],
    name: "getPoolInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address",
          },
          {
            internalType: "address",
            name: "token1",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "rewardRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalStaked",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdateTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardPerTokenStored",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityMining.Pool",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
    ],
    name: "getUserStake",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardPerTokenPaid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewards",
            type: "uint256",
          },
        ],
        internalType: "struct LiquidityMining.UserStake",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pools",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rewardRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdateTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardPerTokenStored",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardPerTokenPaid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewards",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803460a157601f610b3838819003918201601f19168301916001600160401b0383118484101760a65780849260609460405283398101031260a15780516001600160a01b038116919082900360a157604060208201519101519160018060a01b03196002541617600255600355426004554201804211608b57600555604051610a7b90816100bd8239f35b634e487b7160e01b600052601160045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816306bfa9381461081e575080630e15561a14610800578063211dc32d146106ed5780633197cbb6146106cf5780633710d4c71461062d578063372500ab146105e157806378e97925146105c35780637e29d6c214610470578063862d2d7c14610405578063a4063dbc14610384578063bf6eac2f14610262578063d9caed12146100dc5763f7c618c1146100ae57600080fd5b346100d75760003660031901126100d7576002546040516001600160a01b039091168152602090f35b600080fd5b346100d7576100ea36610933565b9160018060a01b031690816000526000602052604060002061011660018060a01b038254161515610a08565b33600052600160205260408060002060009085825260205220908482541061022757836000526000602052604060002091600383015492836101b2575b600393506004429101556101688682546109bb565b9055016101768482546109bb565b90556040519283526001600160a01b03169133907fa4195c37c2947bbe89165f03e320b6903116f0b10d8cfdb522330f7ce6f9fa2490602090a4005b6101ce6101c36004830154426109bb565b6002830154906109c8565b670de0b6b3a7640000810290808204670de0b6b3a76400001490151715610211576003946101fb916109db565b61020a600583019182546109fb565b9055610153565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d081cdd185ad959606a1b6044820152606490fd5b346100d75761027036610933565b9160018060a01b031690816000526000602052604060002061029c60018060a01b038254161515610a08565b82600052600060205260406000209060038201549182610330575b6003925060044291015533600052600160205260406000208460005260205260406000206102e68682546109fb565b9055016102f48482546109fb565b90556040519283526001600160a01b03169133907f6e613e504dcbe267f60e295b08e0a211b63db8690d660e5ed4f864d409bb662090602090a4005b6103416101c36004830154426109bb565b670de0b6b3a7640000810290808204670de0b6b3a764000014901517156102115760039361036e916109db565b61037d600583019182546109fb565b90556102b7565b346100d75760203660031901126100d7576001600160a01b036103a5610907565b16600052600060205260c0604060002060018060a01b038154169060018060a01b036001820154169060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b346100d75760403660031901126100d75760606040610422610907565b61042a61091d565b9060018060a01b031660005260016020528160002060009160018060a01b0316825260205220805490600260018201549101549060405192835260208301526040820152f35b346100d75761047e36610933565b6001600160a01b0391821692909116908183146105905780156105555760207f616f4319a54dcbbb5a18b8b2f702faa1d9c1030304616fc770ae877f0934fcdd916040516104cb8161096d565b8481528281018681526040808301848152600060608501818152426080870190815260a087018381528b8452838a5292859020965187546001600160a01b03199081166001600160a01b03928316178955965160018901805490981691161790955591516002860155905160038501559151600484015590516005929092019190915551908152a3005b60405162461bcd60e51b8152602060048201526013602482015272496e76616c696420726577617264207261746560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201526a53616d6520746f6b656e7360a81b6044820152606490fd5b346100d75760003660031901126100d7576020600454604051908152f35b346100d75760003660031901126100d75760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b6044820152606490fd5b346100d75760403660031901126100d7576060604061064a610907565b61065261091d565b9060008380516106618161099f565b828152826020820152015260018060a01b031660005260016020528160002060009160018060a01b031682526020522060405161069d8161099f565b815491828252604060026001830154926020850193845201549201918252604051928352516020830152516040820152f35b346100d75760003660031901126100d7576020600554604051908152f35b346100d75760403660031901126100d757610706610907565b604061071061091d565b6001600160a01b0390811660008181526020818152848220959093168152600183528381209181529152206005820154600383015490928161078b575b6020610783846002670de0b6b3a7640000610779896107738554916001870154906109bb565b906109c8565b04910154906109fb565b604051908152f35b8060026107a260046107ab949695960154426109bb565b910154906109c8565b91670de0b6b3a7640000830292808404670de0b6b3a7640000149015171561021157670de0b6b3a76400006107796107f46020966107ee600295610783986109db565b906109fb565b9550505081925061074d565b346100d75760003660031901126100d7576020600354604051908152f35b346100d75760203660031901126100d757600060a061083b610907565b926108458161096d565b828152826020820152826040820152826060820152826080820152015260018060a01b0316600052600060205260c060406000206040516108858161096d565b60018060a01b038254169182825260018060a01b03600182015416602083019081526002820154604084019081526003830154916060850192835260a06005600486015495608088019687520154950194855260405195865260018060a01b0390511660208601525160408501525160608401525160808301525160a0820152f35b600435906001600160a01b03821682036100d757565b602435906001600160a01b03821682036100d757565b60609060031901126100d7576004356001600160a01b03811681036100d757906024356001600160a01b03811681036100d7579060443590565b60c0810190811067ffffffffffffffff82111761098957604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761098957604052565b9190820391821161021157565b8181029291811591840414171561021157565b81156109e5570490565b634e487b7160e01b600052601260045260246000fd5b9190820180921161021157565b15610a0f57565b60405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b6044820152606490fdfea26469706673582212209fb39dac239b769dac40f0a10c936f06521b624405a98704dafe726411b9978f64736f6c634300081c0033";

type LiquidityMiningConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityMiningConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityMining__factory extends ContractFactory {
  constructor(...args: LiquidityMiningConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rewardToken: PromiseOrValue<string>,
    _totalRewards: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidityMining> {
    return super.deploy(
      _rewardToken,
      _totalRewards,
      _duration,
      overrides || {}
    ) as Promise<LiquidityMining>;
  }
  override getDeployTransaction(
    _rewardToken: PromiseOrValue<string>,
    _totalRewards: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardToken,
      _totalRewards,
      _duration,
      overrides || {}
    );
  }
  override attach(address: string): LiquidityMining {
    return super.attach(address) as LiquidityMining;
  }
  override connect(signer: Signer): LiquidityMining__factory {
    return super.connect(signer) as LiquidityMining__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityMiningInterface {
    return new utils.Interface(_abi) as LiquidityMiningInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityMining {
    return new Contract(address, _abi, signerOrProvider) as LiquidityMining;
  }
}
