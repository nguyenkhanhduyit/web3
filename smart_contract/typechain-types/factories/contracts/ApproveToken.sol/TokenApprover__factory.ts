/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenApprover,
  TokenApproverInterface,
} from "../../../contracts/ApproveToken.sol/TokenApprover";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5061029e8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063da3e339714610030575b600080fd5b61004a60048036038101906100459190610169565b61004c565b005b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016100879291906101da565b6020604051808303816000875af11580156100a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ca919061023b565b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610100826100d5565b9050919050565b610110816100f5565b811461011b57600080fd5b50565b60008135905061012d81610107565b92915050565b6000819050919050565b61014681610133565b811461015157600080fd5b50565b6000813590506101638161013d565b92915050565b600080600060608486031215610182576101816100d0565b5b60006101908682870161011e565b93505060206101a18682870161011e565b92505060406101b286828701610154565b9150509250925092565b6101c5816100f5565b82525050565b6101d481610133565b82525050565b60006040820190506101ef60008301856101bc565b6101fc60208301846101cb565b9392505050565b60008115159050919050565b61021881610203565b811461022357600080fd5b50565b6000815190506102358161020f565b92915050565b600060208284031215610251576102506100d0565b5b600061025f84828501610226565b9150509291505056fea2646970667358221220c653831db05764b9b76599493a353a41c1e18fc9223bac4e334baca1ac86715664736f6c634300081c0033";

type TokenApproverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenApproverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenApprover__factory extends ContractFactory {
  constructor(...args: TokenApproverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenApprover> {
    return super.deploy(overrides || {}) as Promise<TokenApprover>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenApprover {
    return super.attach(address) as TokenApprover;
  }
  override connect(signer: Signer): TokenApprover__factory {
    return super.connect(signer) as TokenApprover__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenApproverInterface {
    return new utils.Interface(_abi) as TokenApproverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenApprover {
    return new Contract(address, _abi, signerOrProvider) as TokenApprover;
  }
}
