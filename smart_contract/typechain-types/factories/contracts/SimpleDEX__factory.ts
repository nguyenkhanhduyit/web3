/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { SimpleDEX, SimpleDEXInterface } from "../../contracts/SimpleDEX";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "LiquidityAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0Desired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1Desired",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "getLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "reserve0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserve1",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pools",
    outputs: [
      {
        internalType: "uint256",
        name: "reserve0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserve1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610c4b908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063901754d7146109cc578063cf6c62ea146106e7578063d52bb6f41461066d578063d6bd603c146105d1578063d752fab2146103b3578063df791e50146100dc5763ea526de71461006957600080fd5b346100d75760403660031901126100d757610082610a38565b61008a610a4e565b906001600160a01b0380831690821610156100d1575b6001600160a01b03908116600090815260208181526040808320949093168252928352819020600201549051908152f35b906100a0565b600080fd5b346100d7576100ea36610a64565b6001600160a01b03838116939083169061010685831415610a9e565b60408315946101158615610ae0565b8387109283156103ad575b60018060a01b031660005260006020528160002060009160018060a01b03168252602052209384541515806103a0575b15610362576040516323b872dd60e01b81523360048201523060248201526044810185905260208160648160008b5af180156102aa57610345575b506103e58402908482046103e514171561031b57811561033b576101b460018601545b82610b7c565b82156103315785545b6103e88102908082046103e8149015171561031b576101e5926101df91610baf565b90610b8f565b9384156102d657600191156102b6576101ff848254610baf565b81550161020d848254610c08565b90555b60405163a9059cbb60e01b815233600482015260248101849052936020856044816000865af19485156102aa5760209561027f575b5060405192835283858401527fb39c9bc43f811e1a7ce159c5f147458fdb80266bf23c17322013316e27e086d060403394a4604051908152f35b61029e90863d88116102a3575b6102968183610b2c565b810190610b64565b610245565b503d61028c565b6040513d6000823e3d90fd5b6102c1858254610c08565b8155016102cf838254610baf565b9055610210565b60405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60018601546101bd565b6101b485546101ae565b61035d9060203d6020116102a3576102968183610b2c565b61018b565b60405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606490fd5b5060018501541515610150565b90610120565b346100d7576103c136610a64565b90916001600160a01b038084169082166103dd81831415610a9e565b6103e8841515610bbc565b10156105cb575b6001600160a01b03908116600081815260208181526040808320948716835293815283822033835260038101918290529390912054909290841161058657610438815485610b7c565b90600281016104a061044c82548095610b8f565b966104656001850195610460875484610b7c565b610b8f565b968815158061057d575b61047890610bbc565b60018060a01b0333166000526020526040600020610497828254610c08565b90558254610c08565b90556104ad858254610c08565b90556104ba838254610c08565b905560405163a9059cbb60e01b81523360048201526024810184905290602090829060449082906000905af180156102aa57610560575b5060405163a9059cbb60e01b81523360048201526024810182905292602090849060449082906000906001600160a01b03165af19283156102aa57604093610541575b5082519182526020820152f35b6105599060203d6020116102a3576102968183610b2c565b5083610534565b6105789060203d6020116102a3576102968183610b2c565b6104f1565b5087151561046f565b60405162461bcd60e51b815260206004820152601e60248201527f494e53554646494349454e545f4c49515549444954595f42414c414e434500006044820152606490fd5b916103ef565b346100d75760603660031901126100d7576105ea610a38565b6105f2610a4e565b604435906001600160a01b03821682036100d7576003926001600160a01b038281169082161015610667575b60018060a01b0316600052600060205260406000209060018060a01b031660005260205260406000209060018060a01b0316600052016020526020604060002054604051908152f35b9061061e565b346100d75760403660031901126100d757610686610a38565b61068e610a4e565b906001600160a01b0380831690821610156106e1575b60018060a01b0316600052600060205260406000209060018060a01b03166000526020526040806000206001815491015482519182526020820152f35b906106a4565b346100d75760803660031901126100d757610700610a38565b610708610a4e565b6064356044356001600160a01b0383811690851661072881831415610a9e565b821515806109c3575b61073a90610ae0565b109384156109bd5792935b156109b75790915b6001600160a01b03908116600081815260208181526040808320948816835293815283822093516323b872dd60e01b815233600482015230602482015260448101869052939692939182906064908290875af180156102aa5761099a575b506040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b039190911691906020816064816000875af180156102aa5761097d575b50600285018054959086610939576108088686610b7c565b6000600382111561092b5750808060011c6001810180911161031b57905b82821061090c5750505b955b86156108c75760038388936108888560209c6108708c7fa7c0bc175494aac705fdccdb501213f94fb9a6f1dd9be0b3488298cb2dc160889a54610baf565b855560018501610881888254610baf565b9055610baf565b9055336000908152910189526040902080546108a5908490610baf565b90556040805196875260208701919091528501523393606090a4604051908152f35b60405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606490fd5b9091506109228261091d8184610b8f565b610baf565b60011c90610826565b901561083057506001610830565b61094e6109468887610b7c565b835490610b8f565b61096661095b8989610b7c565b600185015490610b8f565b8082101561097657505b95610832565b9050610970565b6109959060203d6020116102a3576102968183610b2c565b6107f0565b6109b29060203d6020116102a3576102968183610b2c565b6107ab565b9161074d565b93610745565b50831515610731565b346100d75760403660031901126100d75760406109e7610a38565b6109ef610a4e565b6001600160a01b03918216600090815260208181528482209290931681529082529190912080546001820154600290920154604080519283529382019290925291820152606090f35b600435906001600160a01b03821682036100d757565b602435906001600160a01b03821682036100d757565b60609060031901126100d7576004356001600160a01b03811681036100d757906024356001600160a01b03811681036100d7579060443590565b15610aa557565b60405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b6044820152606490fd5b15610ae757565b60405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606490fd5b90601f8019910116810190811067ffffffffffffffff821117610b4e57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126100d7575180151581036100d75790565b8181029291811591840414171561031b57565b8115610b99570490565b634e487b7160e01b600052601260045260246000fd5b9190820180921161031b57565b15610bc357565b60405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e45440000006044820152606490fd5b9190820391821161031b5756fea26469706673582212203b7495200d975b8ded0f11a080d9449336edb8b98508c9354da50ccd0c6ff87964736f6c634300081c0033";

type SimpleDEXConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleDEXConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleDEX__factory extends ContractFactory {
  constructor(...args: SimpleDEXConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleDEX> {
    return super.deploy(overrides || {}) as Promise<SimpleDEX>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleDEX {
    return super.attach(address) as SimpleDEX;
  }
  override connect(signer: Signer): SimpleDEX__factory {
    return super.connect(signer) as SimpleDEX__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleDEXInterface {
    return new utils.Interface(_abi) as SimpleDEXInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleDEX {
    return new Contract(address, _abi, signerOrProvider) as SimpleDEX;
  }
}
