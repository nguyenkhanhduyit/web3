/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Liquidity,
  LiquidityInterface,
} from "../../../contracts/Liquidity.sol/Liquidity";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "uint24",
        name: "tierId",
        type: "uint24",
      },
      {
        internalType: "uint128",
        name: "amount0Desired",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amount1Desired",
        type: "uint128",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "contract IV4PositionManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516112c73803806112c7833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6111b0806101176000396000f3fe6080604052600436106100295760003560e01c80634c2e93931461002e578063791b98bc1461004a575b600080fd5b61004860048036038101906100439190610999565b610075565b005b34801561005657600080fd5b5061005f610635565b60405161006c9190610a9a565b60405180910390f35b6100b36040518060400160405280601281526020017f5374617274206164644c69717569646974790000000000000000000000000000815250610659565b6100f26040518060400160405280600681526020017f546f6b656e300000000000000000000000000000000000000000000000000000815250886106f2565b6101316040518060400160405280600681526020017f546f6b656e310000000000000000000000000000000000000000000000000000815250876106f2565b6101e96040518060400160405280600e81526020017f42616c616e636520746f6b656e300000000000000000000000000000000000008152508873ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101a39190610ac4565b602060405180830381865afa1580156101c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e49190610b15565b61078e565b6102a16040518060400160405280600e81526020017f42616c616e636520746f6b656e310000000000000000000000000000000000008152508773ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161025b9190610ac4565b602060405180830381865afa158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c9190610b15565b61078e565b816fffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016102ef929190610b42565b602060405180830381865afa15801561030c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103309190610b15565b1015610371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036890610bc8565b60405180910390fd5b806fffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016103bf929190610b42565b602060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104009190610b15565b1015610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890610c34565b60405180910390fd5b6000600160f81b90506000600760f81b905060008282604051602001610468929190610ca1565b604051602081830303815290604052905060008a8a8a8a8a8a8a3360405160200161049a989796959493929190610d20565b604051602081830303815290604052905060008b8b6040516020016104c0929190610b42565b60405160208183030381529060405290506000600267ffffffffffffffff8111156104ee576104ed610db2565b5b60405190808252806020026020018201604052801561052157816020015b606081526020019060019003908161050c5790505b509050828160008151811061053957610538610de1565b5b6020026020010181905250818160018151811061055957610558610de1565b5b602002602001018190525060008482604051602001610579929190610fac565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd46508f3483610258426105d69190611012565b6040518463ffffffff1660e01b81526004016105f3929190611055565b6000604051808303818588803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b50505050505050505050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106ef8160405160240161066d91906110c9565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061082a565b50565b61078a82826040516024016107089291906110eb565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061082a565b5050565b61082682826040516024016107a492919061111b565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061082a565b5050565b61084181610839610844610865565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610870819050919050565b61087861114b565b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108aa8261087f565b9050919050565b6108ba8161089f565b81146108c557600080fd5b50565b6000813590506108d7816108b1565b92915050565b60008160020b9050919050565b6108f3816108dd565b81146108fe57600080fd5b50565b600081359050610910816108ea565b92915050565b600062ffffff82169050919050565b61092e81610916565b811461093957600080fd5b50565b60008135905061094b81610925565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61097681610951565b811461098157600080fd5b50565b6000813590506109938161096d565b92915050565b600080600080600080600060e0888a0312156109b8576109b761087a565b5b60006109c68a828b016108c8565b97505060206109d78a828b016108c8565b96505060406109e88a828b01610901565b95505060606109f98a828b01610901565b9450506080610a0a8a828b0161093c565b93505060a0610a1b8a828b01610984565b92505060c0610a2c8a828b01610984565b91505092959891949750929550565b6000819050919050565b6000610a60610a5b610a568461087f565b610a3b565b61087f565b9050919050565b6000610a7282610a45565b9050919050565b6000610a8482610a67565b9050919050565b610a9481610a79565b82525050565b6000602082019050610aaf6000830184610a8b565b92915050565b610abe8161089f565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b6000819050919050565b610af281610adf565b8114610afd57600080fd5b50565b600081519050610b0f81610ae9565b92915050565b600060208284031215610b2b57610b2a61087a565b5b6000610b3984828501610b00565b91505092915050565b6000604082019050610b576000830185610ab5565b610b646020830184610ab5565b9392505050565b600082825260208201905092915050565b7f546f6b656e30206e6f7420617070726f76656400000000000000000000000000600082015250565b6000610bb2601383610b6b565b9150610bbd82610b7c565b602082019050919050565b60006020820190508181036000830152610be181610ba5565b9050919050565b7f546f6b656e31206e6f7420617070726f76656400000000000000000000000000600082015250565b6000610c1e601383610b6b565b9150610c2982610be8565b602082019050919050565b60006020820190508181036000830152610c4d81610c11565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610c9b610c9682610c54565b610c80565b82525050565b6000610cad8285610c8a565b600182019150610cbd8284610c8a565b6001820191508190509392505050565b610cd6816108dd565b82525050565b610ce581610916565b82525050565b610cf481610951565b82525050565b50565b6000610d0a600083610b6b565b9150610d1582610cfa565b600082019050919050565b600061012082019050610d36600083018b610ab5565b610d43602083018a610ab5565b610d506040830189610ccd565b610d5d6060830188610ccd565b610d6a6080830187610cdc565b610d7760a0830186610ceb565b610d8460c0830185610ceb565b610d9160e0830184610ab5565b818103610100830152610da381610cfd565b90509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b60005b83811015610e4a578082015181840152602081019050610e2f565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e7282610e10565b610e7c8185610e1b565b9350610e8c818560208601610e2c565b610e9581610e56565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610ee882610e10565b610ef28185610ecc565b9350610f02818560208601610e2c565b610f0b81610e56565b840191505092915050565b6000610f228383610edd565b905092915050565b6000602082019050919050565b6000610f4282610ea0565b610f4c8185610eab565b935083602082028501610f5e85610ebc565b8060005b85811015610f9a5784840389528151610f7b8582610f16565b9450610f8683610f2a565b925060208a01995050600181019050610f62565b50829750879550505050505092915050565b60006040820190508181036000830152610fc68185610e67565b90508181036020830152610fda8184610f37565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061101d82610adf565b915061102883610adf565b92508282019050808211156110405761103f610fe3565b5b92915050565b61104f81610adf565b82525050565b6000604082019050818103600083015261106f8185610e67565b905061107e6020830184611046565b9392505050565b600081519050919050565b600061109b82611085565b6110a58185610b6b565b93506110b5818560208601610e2c565b6110be81610e56565b840191505092915050565b600060208201905081810360008301526110e38184611090565b905092915050565b600060408201905081810360008301526111058185611090565b90506111146020830184610ab5565b9392505050565b600060408201905081810360008301526111358185611090565b90506111446020830184611046565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220633ba2c9db720193db63152b2ef0f08ae5373973e7475d3e23d922b4ce4b4fce64736f6c634300081c0033";

type LiquidityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Liquidity__factory extends ContractFactory {
  constructor(...args: LiquidityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _positionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Liquidity> {
    return super.deploy(
      _positionManager,
      overrides || {}
    ) as Promise<Liquidity>;
  }
  override getDeployTransaction(
    _positionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_positionManager, overrides || {});
  }
  override attach(address: string): Liquidity {
    return super.attach(address) as Liquidity;
  }
  override connect(signer: Signer): Liquidity__factory {
    return super.connect(signer) as Liquidity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityInterface {
    return new utils.Interface(_abi) as LiquidityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Liquidity {
    return new Contract(address, _abi, signerOrProvider) as Liquidity;
  }
}
