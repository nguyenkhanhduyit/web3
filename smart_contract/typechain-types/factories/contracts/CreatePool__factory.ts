/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CreatePool,
  CreatePoolInterface,
} from "../../contracts/CreatePool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_poolManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "createPool",
    outputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "poolManager",
    outputs: [
      {
        internalType: "contract IPoolManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051611025380380611025833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610f0e806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806321fb35061461003b578063dc4c90d31461006b575b600080fd5b6100556004803603810190610050919061080d565b610089565b60405161006291906108a1565b60405180910390f35b6100736103e8565b604051610080919061091b565b60405180910390f35b6000808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16106100c557856100c7565b865b905060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16106101045787610106565b865b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348028ecf84848a8a6040518563ffffffff1660e01b815260040161016a9493929190610963565b602060405180830381865afa158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab91906109bd565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461021c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021390610a47565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166332ff3fbc84848a8a8a6040518663ffffffff1660e01b815260040161027d959493929190610a76565b6020604051808303816000875af19250505080156102b957506040513d601f19601f820116820180604052508101906102b69190610af5565b60015b6103d8576102c5610b2f565b806308c379a00361034057506102d9610bc2565b806102e45750610342565b806040516020016102f59190610d0f565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103379190610d6a565b60405180910390fd5b505b3d806000811461036e576040519150601f19603f3d011682016040523d82523d6000602084013e610373565b606091505b5061037d8161040c565b60405160200161038d9190610dd8565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cf9190610d6a565b60405180910390fd5b8094505050505095945050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000600284516104589190610e33565b60026104649190610e75565b67ffffffffffffffff81111561047d5761047c610b62565b5b6040519080825280601f01601f1916602001820160405280156104af5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106104e7576104e6610ea9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061054b5761054a610ea9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b84518110156106f55782600486838151811061059c5761059b610ea9565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff16815181106105e2576105e1610ea9565b5b602001015160f81c60f81b826002836105fb9190610e33565b60026106079190610e75565b8151811061061857610617610ea9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b8683815181106106605761065f610ea9565b5b602001015160f81c60f81b1660f81c60ff168151811061068357610682610ea9565b5b602001015160f81c60f81b8260028361069c9190610e33565b60036106a89190610e75565b815181106106b9576106b8610ea9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061057d565b508092505050919050565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073a8261070f565b9050919050565b61074a8161072f565b811461075557600080fd5b50565b60008135905061076781610741565b92915050565b600062ffffff82169050919050565b6107858161076d565b811461079057600080fd5b50565b6000813590506107a28161077c565b92915050565b60008160020b9050919050565b6107be816107a8565b81146107c957600080fd5b50565b6000813590506107db816107b5565b92915050565b6107ea8161070f565b81146107f557600080fd5b50565b600081359050610807816107e1565b92915050565b600080600080600060a086880312156108295761082861070a565b5b600061083788828901610758565b955050602061084888828901610758565b945050604061085988828901610793565b935050606061086a888289016107cc565b925050608061087b888289016107f8565b9150509295509295909350565b6000819050919050565b61089b81610888565b82525050565b60006020820190506108b66000830184610892565b92915050565b6000819050919050565b60006108e16108dc6108d78461070f565b6108bc565b61070f565b9050919050565b60006108f3826108c6565b9050919050565b6000610905826108e8565b9050919050565b610915816108fa565b82525050565b6000602082019050610930600083018461090c565b92915050565b61093f8161072f565b82525050565b61094e8161076d565b82525050565b61095d816107a8565b82525050565b60006080820190506109786000830187610936565b6109856020830186610936565b6109926040830185610945565b61099f6060830184610954565b95945050505050565b6000815190506109b781610741565b92915050565b6000602082840312156109d3576109d261070a565b5b60006109e1848285016109a8565b91505092915050565b600082825260208201905092915050565b7f437265617465506f6f6c3a20506f6f6c20616c72656164792065786973747300600082015250565b6000610a31601f836109ea565b9150610a3c826109fb565b602082019050919050565b60006020820190508181036000830152610a6081610a24565b9050919050565b610a708161070f565b82525050565b600060a082019050610a8b6000830188610936565b610a986020830187610936565b610aa56040830186610945565b610ab26060830185610954565b610abf6080830184610a67565b9695505050505050565b610ad281610888565b8114610add57600080fd5b50565b600081519050610aef81610ac9565b92915050565b600060208284031215610b0b57610b0a61070a565b5b6000610b1984828501610ae0565b91505092915050565b60008160e01c9050919050565b600060033d1115610b4e5760046000803e610b4b600051610b22565b90505b90565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9a82610b51565b810181811067ffffffffffffffff82111715610bb957610bb8610b62565b5b80604052505050565b600060443d10610c4f57610bd4610700565b60043d036004823e80513d602482011167ffffffffffffffff82111715610bfc575050610c4f565b808201805167ffffffffffffffff811115610c1a5750505050610c4f565b80602083010160043d038501811115610c37575050505050610c4f565b610c4682602001850186610b91565b82955050505050505b90565b600081905092915050565b7f437265617465506f6f6c3a2072657665727420726561736f6e202d2000000000600082015250565b6000610c93601c83610c52565b9150610c9e82610c5d565b601c82019050919050565b600081519050919050565b60005b83811015610cd2578082015181840152602081019050610cb7565b60008484015250505050565b6000610ce982610ca9565b610cf38185610c52565b9350610d03818560208601610cb4565b80840191505092915050565b6000610d1a82610c86565b9150610d268284610cde565b915081905092915050565b6000610d3c82610ca9565b610d4681856109ea565b9350610d56818560208601610cb4565b610d5f81610b51565b840191505092915050565b60006020820190508181036000830152610d848184610d31565b905092915050565b7f437265617465506f6f6c3a206c6f772d6c6576656c206572726f72202d200000600082015250565b6000610dc2601e83610c52565b9150610dcd82610d8c565b601e82019050919050565b6000610de382610db5565b9150610def8284610cde565b915081905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e3e82610dfa565b9150610e4983610dfa565b9250828202610e5781610dfa565b91508282048414831517610e6e57610e6d610e04565b5b5092915050565b6000610e8082610dfa565b9150610e8b83610dfa565b9250828201905080821115610ea357610ea2610e04565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220d466cef276cb7b73d7353e27468d2d5d1d3cf3fe55afea378b0b587e85d9c05a64736f6c634300081c0033";

type CreatePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CreatePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CreatePool__factory extends ContractFactory {
  constructor(...args: CreatePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CreatePool> {
    return super.deploy(_poolManager, overrides || {}) as Promise<CreatePool>;
  }
  override getDeployTransaction(
    _poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_poolManager, overrides || {});
  }
  override attach(address: string): CreatePool {
    return super.attach(address) as CreatePool;
  }
  override connect(signer: Signer): CreatePool__factory {
    return super.connect(signer) as CreatePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CreatePoolInterface {
    return new utils.Interface(_abi) as CreatePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreatePool {
    return new Contract(address, _abi, signerOrProvider) as CreatePool;
  }
}
