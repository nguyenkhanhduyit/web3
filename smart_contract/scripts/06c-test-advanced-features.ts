import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

// ƒê·ªãnh nghƒ©a interface cho token info
interface TokenInfo {
  tokenAddress: string;
  symbol: string;
  decimals: number;
  name: string;
}

/**
 * Script test t√≠ch h·ª£p c√°c t√≠nh nƒÉng n√¢ng cao
 * Ch·ª©c nƒÉng:
 * - Test t√≠ch h·ª£p PriceOracle v·ªõi SimpleDEX
 * - Test t√≠ch h·ª£p LiquidityMining v·ªõi SimpleDEX
 * - Ki·ªÉm tra t√≠nh nƒÉng staking v√† reward
 * - L∆∞u k·∫øt qu·∫£ test
 */
async function main() {
  console.log("üß™ ƒêang test t√≠ch h·ª£p c√°c t√≠nh nƒÉng n√¢ng cao...\n");

  // L·∫•y th√¥ng tin ng∆∞·ªùi deploy (v√≠ ch√≠nh)
  const [deployer] = await ethers.getSigners();
  console.log("üìç ƒê·ªãa ch·ªâ ng∆∞·ªùi test:", deployer.address);

  // ƒê·ªçc th√¥ng tin deployment t·ª´ c√°c file JSON
  const tokens: any = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/TokenAddress.json"), "utf8")
  );
  
  const simpleDexAddress = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/SimpleDEXAddress.json"), "utf8")
  ).address;

  // ƒê·ªçc th√¥ng tin PriceOracle deployment
  let priceOracleAddress = "";
  try {
    const priceOracleDeployment = JSON.parse(
      fs.readFileSync(path.resolve(__dirname, "../info/PriceOracleDeployment.json"), "utf8")
    );
    if (priceOracleDeployment.priceOracle.status === "success") {
      priceOracleAddress = priceOracleDeployment.priceOracle.address;
    }
  } catch (error) {
    console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file PriceOracleDeployment.json");
  }

  // ƒê·ªçc th√¥ng tin LiquidityMining deployment
  let liquidityMiningAddress = "";
  try {
    const liquidityMiningDeployment = JSON.parse(
      fs.readFileSync(path.resolve(__dirname, "../info/LiquidityMiningDeployment.json"), "utf8")
    );
    if (liquidityMiningDeployment.liquidityMining.status === "success") {
      liquidityMiningAddress = liquidityMiningDeployment.liquidityMining.address;
    }
  } catch (error) {
    console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file LiquidityMiningDeployment.json");
  }

  // Kh·ªüi t·∫°o object ƒë·ªÉ l∆∞u k·∫øt qu·∫£ test
  const testResults = {
    timestamp: new Date().toISOString(),
    integrationTests: {
      priceOracle: { status: "pending", results: {} },
      liquidityMining: { status: "pending", results: {} }
    }
  };

  // ===== TEST T√çCH H·ª¢P PRICE ORACLE =====
  if (priceOracleAddress) {
    console.log("\n" + "=".repeat(50));
    console.log("üìä Test t√≠ch h·ª£p Price Oracle v·ªõi SimpleDEX");
    console.log("=".repeat(50));

    try {
      // L·∫•y contract instances
      const simpleDex = await ethers.getContractAt("SimpleDEX", simpleDexAddress);
      const priceOracle = await ethers.getContractAt("PriceOracle", priceOracleAddress);

      // L·∫•y th√¥ng tin token ƒë·ªÉ test
      const tokenEntries = Object.entries(tokens);
      const [token1Name, token1Info]: [string, any] = tokenEntries[0];
      const [token2Name, token2Info]: [string, any] = tokenEntries[1];

      console.log(`\nüìã Test v·ªõi c·∫∑p token: ${token1Name}-${token2Name}`);

      // Test 1: So s√°nh gi√° t·ª´ PriceOracle v·ªõi gi√° t·ª´ SimpleDEX
      console.log("\nüßÆ Test 1: So s√°nh gi√° t·ª´ c√°c ngu·ªìn kh√°c nhau...");

      // L·∫•y gi√° t·ª´ PriceOracle
      const oraclePrice = await priceOracle.getPrice(token1Info.tokenAddress, token2Info.tokenAddress);
      console.log(`üìä Gi√° t·ª´ PriceOracle: ${ethers.utils.formatEther(oraclePrice)} ${token2Info.symbol} per ${token1Info.symbol}`);

      // L·∫•y gi√° t·ª´ SimpleDEX
      const dexPrice = await simpleDex.getPrice(token1Info.tokenAddress, token2Info.tokenAddress);
      console.log(`üìà Gi√° t·ª´ SimpleDEX: ${ethers.utils.formatEther(dexPrice)} ${token2Info.symbol} per ${token1Info.symbol}`);

      // T√≠nh to√°n ch√™nh l·ªách
      const priceDifference = oraclePrice.sub(dexPrice).abs();
      const priceDifferencePercent = priceDifference.mul(100).div(oraclePrice);
      console.log(`üìä Ch√™nh l·ªách gi√°: ${ethers.utils.formatEther(priceDifference)} ${token2Info.symbol} (${priceDifferencePercent}%)`);

      // Test 2: C·∫≠p nh·∫≠t gi√° v√† ki·ªÉm tra
      console.log("\nüîÑ Test 2: C·∫≠p nh·∫≠t gi√° v√† ki·ªÉm tra...");
      
      // C·∫≠p nh·∫≠t gi√° m·ªõi (1 BTC = 20 ETH)
      const newPrice = ethers.utils.parseEther("20");
      const updateTx = await priceOracle.updatePrice(token1Info.tokenAddress, token2Info.tokenAddress, newPrice);
      await updateTx.wait();
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√°: 1 ${token1Info.symbol} = 20 ${token2Info.symbol}`);

      // Ki·ªÉm tra gi√° ƒë√£ c·∫≠p nh·∫≠t
      const updatedOraclePrice = await priceOracle.getPrice(token1Info.tokenAddress, token2Info.tokenAddress);
      console.log(`üìä Gi√° ƒë√£ c·∫≠p nh·∫≠t: ${ethers.utils.formatEther(updatedOraclePrice)} ${token2Info.symbol} per ${token1Info.symbol}`);

      // L∆∞u k·∫øt qu·∫£ test PriceOracle
      testResults.integrationTests.priceOracle = {
        status: "success",
        results: {
          originalOraclePrice: ethers.utils.formatEther(oraclePrice),
          dexPrice: ethers.utils.formatEther(dexPrice),
          priceDifference: ethers.utils.formatEther(priceDifference),
          priceDifferencePercent: priceDifferencePercent.toString(),
          updatedPrice: ethers.utils.formatEther(updatedOraclePrice),
          testTokens: `${token1Name}-${token2Name}`
        }
      };

      console.log("‚úÖ Test t√≠ch h·ª£p PriceOracle th√†nh c√¥ng!");

    } catch (error) {
      console.log("‚ùå Test t√≠ch h·ª£p PriceOracle th·∫•t b·∫°i:", error.message);
      testResults.integrationTests.priceOracle = {
        status: "failed",
        error: error.message
      };
    }
  } else {
    console.log("‚ö†Ô∏è B·ªè qua test PriceOracle - ch∆∞a c√≥ deployment");
    testResults.integrationTests.priceOracle = {
      status: "skipped",
      reason: "No PriceOracle deployment found"
    };
  }

  // ===== TEST T√çCH H·ª¢P LIQUIDITY MINING =====
  if (liquidityMiningAddress) {
    console.log("\n" + "=".repeat(50));
    console.log("‚õèÔ∏è Test t√≠ch h·ª£p Liquidity Mining v·ªõi SimpleDEX");
    console.log("=".repeat(50));

    try {
      // L·∫•y contract instances
      const simpleDex = await ethers.getContractAt("SimpleDEX", simpleDexAddress);
      const liquidityMining = await ethers.getContractAt("LiquidityMining", liquidityMiningAddress);

      // L·∫•y th√¥ng tin token ƒë·ªÉ test
      const tokenEntries = Object.entries(tokens);
      const [token1Name, token1Info] = tokenEntries[0];
      const [token2Name, token2Info] = tokenEntries[1];
      const usdtInfo = tokens["Tether USD"];

      console.log(`\nüìã Test v·ªõi pool: ${token1Name}-${token2Name}`);

      // Test 1: Ki·ªÉm tra th√¥ng tin pool trong LiquidityMining
      console.log("\nüìä Test 1: Ki·ªÉm tra th√¥ng tin pool...");
      
      const poolInfo = await liquidityMining.getPoolInfo(token1Info.tokenAddress);
      console.log(`üìà Th√¥ng tin pool:`);
      console.log(`   ‚Ä¢ Total staked: ${poolInfo.totalStaked}`);
      console.log(`   ‚Ä¢ Reward rate: ${ethers.utils.formatUnits(poolInfo.rewardRate, usdtInfo.decimals)} ${usdtInfo.symbol}/gi√¢y`);
      console.log(`   ‚Ä¢ Last update time: ${new Date(poolInfo.lastUpdateTime * 1000).toLocaleString()}`);

      // Test 2: Ki·ªÉm tra th√¥ng tin liquidity trong SimpleDEX
      console.log("\nüèä Test 2: Ki·ªÉm tra th√¥ng tin liquidity...");
      
      const reserves = await simpleDex.getReserves(token1Info.tokenAddress, token2Info.tokenAddress);
      const totalLiquidity = await simpleDex.getLiquidity(token1Info.tokenAddress, token2Info.tokenAddress);
      const userLiquidity = await simpleDex.getBalance(token1Info.tokenAddress, token2Info.tokenAddress, deployer.address);

      console.log(`üìä Th√¥ng tin liquidity:`);
      console.log(`   ‚Ä¢ Reserves: ${ethers.utils.formatUnits(reserves[0], token1Info.decimals)} ${token1Info.symbol}, ${ethers.utils.formatUnits(reserves[1], token2Info.decimals)} ${token2Info.symbol}`);
      console.log(`   ‚Ä¢ Total liquidity: ${ethers.utils.formatUnits(totalLiquidity, 18)}`);
      console.log(`   ‚Ä¢ User liquidity: ${ethers.utils.formatUnits(userLiquidity, 18)}`);

      // Test 3: T√≠nh to√°n reward ti·ªÅm nƒÉng
      console.log("\nüéÅ Test 3: T√≠nh to√°n reward ti·ªÅm nƒÉng...");
      
      const rewardRate = poolInfo.rewardRate;
      const dailyReward = rewardRate.mul(24 * 60 * 60); // Reward rate * s·ªë gi√¢y trong ng√†y
      const weeklyReward = dailyReward.mul(7); // Reward trong 1 tu·∫ßn
      const monthlyReward = dailyReward.mul(30); // Reward trong 1 th√°ng

      console.log(`üìÖ T√≠nh to√°n reward:`);
      console.log(`   ‚Ä¢ Reward m·ªói ng√†y: ${ethers.utils.formatUnits(dailyReward, usdtInfo.decimals)} ${usdtInfo.symbol}`);
      console.log(`   ‚Ä¢ Reward m·ªói tu·∫ßn: ${ethers.utils.formatUnits(weeklyReward, usdtInfo.decimals)} ${usdtInfo.symbol}`);
      console.log(`   ‚Ä¢ Reward m·ªói th√°ng: ${ethers.utils.formatUnits(monthlyReward, usdtInfo.decimals)} ${usdtInfo.symbol}`);

      // Test 4: Ki·ªÉm tra th√¥ng tin reward token
      console.log("\nüí∞ Test 4: Ki·ªÉm tra th√¥ng tin reward token...");
      
      const rewardTokenAddress = await liquidityMining.rewardToken();
      const totalRewards = await liquidityMining.totalRewards();
      const startTime = await liquidityMining.startTime();
      const endTime = await liquidityMining.endTime();

      console.log(`üìä Th√¥ng tin reward token:`);
      console.log(`   ‚Ä¢ Token address: ${rewardTokenAddress}`);
      console.log(`   ‚Ä¢ Total rewards: ${ethers.utils.formatUnits(totalRewards, usdtInfo.decimals)} ${usdtInfo.symbol}`);
      console.log(`   ‚Ä¢ Start time: ${new Date(startTime * 1000).toLocaleString()}`);
      console.log(`   ‚Ä¢ End time: ${new Date(endTime * 1000).toLocaleString()}`);

      // L∆∞u k·∫øt qu·∫£ test LiquidityMining
      testResults.integrationTests.liquidityMining = {
        status: "success",
        results: {
          poolInfo: {
            totalStaked: poolInfo.totalStaked.toString(),
            rewardRate: ethers.utils.formatUnits(poolInfo.rewardRate, usdtInfo.decimals),
            lastUpdateTime: new Date(poolInfo.lastUpdateTime * 1000).toISOString()
          },
          liquidityInfo: {
            reserves: {
              token1: ethers.utils.formatUnits(reserves[0], token1Info.decimals),
              token2: ethers.utils.formatUnits(reserves[1], token2Info.decimals)
            },
            totalLiquidity: ethers.utils.formatUnits(totalLiquidity, 18),
            userLiquidity: ethers.utils.formatUnits(userLiquidity, 18)
          },
          rewardCalculation: {
            dailyReward: ethers.utils.formatUnits(dailyReward, usdtInfo.decimals),
            weeklyReward: ethers.utils.formatUnits(weeklyReward, usdtInfo.decimals),
            monthlyReward: ethers.utils.formatUnits(monthlyReward, usdtInfo.decimals)
          },
          rewardTokenInfo: {
            address: rewardTokenAddress,
            totalRewards: ethers.utils.formatUnits(totalRewards, usdtInfo.decimals),
            startTime: new Date(startTime * 1000).toISOString(),
            endTime: new Date(endTime * 1000).toISOString()
          },
          testPool: `${token1Name}-${token2Name}`
        }
      };

      console.log("‚úÖ Test t√≠ch h·ª£p LiquidityMining th√†nh c√¥ng!");

    } catch (error) {
      console.log("‚ùå Test t√≠ch h·ª£p LiquidityMining th·∫•t b·∫°i:", error.message);
      testResults.integrationTests.liquidityMining = {
        status: "failed",
        error: error.message
      };
    }
  } else {
    console.log("‚ö†Ô∏è B·ªè qua test LiquidityMining - ch∆∞a c√≥ deployment");
    testResults.integrationTests.liquidityMining = {
      status: "skipped",
      reason: "No LiquidityMining deployment found"
    };
  }

  // ===== L∆ØU K·∫æT QU·∫¢ TEST =====
  console.log("\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ test...");
  
  // T·∫°o th∆∞ m·ª•c info n·∫øu ch∆∞a c√≥
  const infoDir = path.resolve(__dirname, "../info");
  if (!fs.existsSync(infoDir)) {
    fs.mkdirSync(infoDir, { recursive: true });
  }
  
  // L∆∞u k·∫øt qu·∫£ v√†o file JSON
  fs.writeFileSync(
    path.resolve(infoDir, "AdvancedFeaturesIntegrationTest.json"),
    JSON.stringify(testResults, null, 2)
  );

  // ===== HI·ªÇN TH·ªä T·ªîNG K·∫æT =====
  console.log("\n" + "=".repeat(50));
  console.log("üéâ HO√ÄN TH√ÄNH TEST T√çCH H·ª¢P T√çNH NƒÇNG N√ÇNG CAO!");
  console.log("=".repeat(50));
  
  // Hi·ªÉn th·ªã k·∫øt qu·∫£ PriceOracle
  if (testResults.integrationTests.priceOracle.status === "success") {
    console.log("‚úÖ PriceOracle Integration: Th√†nh c√¥ng");
    const results = testResults.integrationTests.priceOracle.results;
    console.log(`   ‚Ä¢ Ch√™nh l·ªách gi√°: ${results.priceDifferencePercent}%`);
    console.log(`   ‚Ä¢ Gi√° ƒë√£ c·∫≠p nh·∫≠t: ${results.updatedPrice} ETH per BTC`);
  } else if (testResults.integrationTests.priceOracle.status === "skipped") {
    console.log("‚ö†Ô∏è PriceOracle Integration: B·ªè qua (ch∆∞a c√≥ deployment)");
  } else {
    console.log("‚ùå PriceOracle Integration: Th·∫•t b·∫°i");
  }

  // Hi·ªÉn th·ªã k·∫øt qu·∫£ LiquidityMining
  if (testResults.integrationTests.liquidityMining.status === "success") {
    console.log("‚úÖ LiquidityMining Integration: Th√†nh c√¥ng");
    const results = testResults.integrationTests.liquidityMining.results;
    console.log(`   ‚Ä¢ Reward m·ªói ng√†y: ${results.rewardCalculation.dailyReward} USDT`);
    console.log(`   ‚Ä¢ Total staked: ${results.poolInfo.totalStaked}`);
  } else if (testResults.integrationTests.liquidityMining.status === "skipped") {
    console.log("‚ö†Ô∏è LiquidityMining Integration: B·ªè qua (ch∆∞a c√≥ deployment)");
  } else {
    console.log("‚ùå LiquidityMining Integration: Th·∫•t b·∫°i");
  }
  
  console.log("üìÅ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: info/AdvancedFeaturesIntegrationTest.json");
  
  console.log("\nüöÄ B∆Ø·ªöC TI·∫æP THEO:");
  console.log("-".repeat(40));
  console.log("1. X√¢y d·ª±ng frontend ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c t√≠nh nƒÉng");
  console.log("2. Th√™m t√≠nh nƒÉng staking/unstaking liquidity");
  console.log("3. Th√™m t√≠nh nƒÉng claim reward");
  console.log("4. T√≠ch h·ª£p v·ªõi v√≠ ng∆∞·ªùi d√πng");
  console.log("5. Th√™m t√≠nh nƒÉng qu·∫£n l√Ω pool");
}

// Ch·∫°y script ch√≠nh
main().catch(e => {
  console.error("‚ùå L·ªói khi ch·∫°y script:", e);
  process.exit(1);
}); 