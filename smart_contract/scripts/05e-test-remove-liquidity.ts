import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Script test r√∫t thanh kho·∫£n t·ª´ SimpleDEX
 * Ch·ª©c nƒÉng:
 * - Ki·ªÉm tra thanh kho·∫£n hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
 * - R√∫t m·ªôt ph·∫ßn thanh kho·∫£n
 * - Ki·ªÉm tra tr·∫°ng th√°i sau khi r√∫t
 * - L∆∞u k·∫øt qu·∫£ test
 */
async function main() {
  console.log("‚ûñ ƒêang test r√∫t thanh kho·∫£n t·ª´ SimpleDEX...\n");

  // ƒê·ªçc th√¥ng tin token ƒë√£ deploy t·ª´ file JSON
  const tokens = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/TokenAddress.json"), "utf8")
  );
  
  // ƒê·ªçc ƒë·ªãa ch·ªâ SimpleDEX ƒë√£ deploy t·ª´ file JSON
  const simpleDexAddress = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/SimpleDEXAddress.json"), "utf8")
  ).address;

  // L·∫•y th√¥ng tin ng∆∞·ªùi deploy (v√≠ ch√≠nh)
  const [deployer] = await ethers.getSigners();
  
  // Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
  console.log("üìç ƒê·ªãa ch·ªâ ng∆∞·ªùi test:", deployer.address);
  console.log("üè¶ ƒê·ªãa ch·ªâ SimpleDEX:", simpleDexAddress);

  // L·∫•y th√¥ng tin 2 token ƒë·∫ßu ti√™n ƒë·ªÉ test
  const tokenEntries = Object.entries(tokens);
  const [token1Name, token1Info] = tokenEntries[0]; // Token ƒë·∫ßu ti√™n (v√≠ d·ª•: Bitcoin)
  const [token2Name, token2Info] = tokenEntries[1]; // Token th·ª© hai (v√≠ d·ª•: Ethereum)

  console.log(`\nü™ô ƒêang test v·ªõi c·∫∑p token: ${token1Name} (${token1Info.symbol}) & ${token2Name} (${token2Info.symbol})`);

  // L·∫•y contract instance c·ªßa SimpleDEX
  const simpleDex = await ethers.getContractAt("SimpleDEX", simpleDexAddress);

  // T·∫°o contract instance cho token1 v·ªõi c√°c function c·∫ßn thi·∫øt
  const token1Contract = new ethers.Contract(token1Info.tokenAddress, [
    "function balanceOf(address) external view returns (uint256)", // Function ki·ªÉm tra s·ªë d∆∞
    "function approve(address,uint256) external returns (bool)"     // Function ph√™ duy·ªát chi ti√™u
  ], deployer);
  
  // T·∫°o contract instance cho token2 v·ªõi c√°c function c·∫ßn thi·∫øt
  const token2Contract = new ethers.Contract(token2Info.tokenAddress, [
    "function balanceOf(address) external view returns (uint256)", // Function ki·ªÉm tra s·ªë d∆∞
    "function approve(address,uint256) external returns (bool)"     // Function ph√™ duy·ªát chi ti√™u
  ], deployer);

  // Kh·ªüi t·∫°o object ƒë·ªÉ l∆∞u k·∫øt qu·∫£ test
  const testResults: any = {
    timestamp: new Date().toISOString(), // Th·ªùi gian test
    testType: "remove_liquidity_test",   // Lo·∫°i test
    testResults: {}                      // K·∫øt qu·∫£ test s·∫Ω ƒë∆∞·ª£c l∆∞u ·ªü ƒë√¢y
  };

  // ===== TEST R√öT THANH KHO·∫¢N =====
  console.log("\n" + "=".repeat(50));
  console.log("‚ûñ TEST R√öT THANH KHO·∫¢N");
  console.log("=".repeat(50));

  try {
    // B∆∞·ªõc 1: Ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi r√∫t thanh kho·∫£n
    console.log("\nüîç ƒêang ki·ªÉm tra tr·∫°ng th√°i tr∆∞·ªõc khi r√∫t thanh kho·∫£n...");
    
    // L·∫•y reserves hi·ªán t·∫°i
    const reservesBefore = await simpleDex.getReserves(token1Info.tokenAddress, token2Info.tokenAddress);
    console.log(`üí∞ Reserves tr∆∞·ªõc khi r√∫t:`);
    console.log(`   ‚Ä¢ ${token1Info.symbol}: ${ethers.utils.formatUnits(reservesBefore[0], token1Info.decimals)}`);
    console.log(`   ‚Ä¢ ${token2Info.symbol}: ${ethers.utils.formatUnits(reservesBefore[1], token2Info.decimals)}`);
    
    // L·∫•y t·ªïng thanh kho·∫£n hi·ªán t·∫°i
    const totalLiquidityBefore = await simpleDex.getLiquidity(token1Info.tokenAddress, token2Info.tokenAddress);
    console.log(`üèä T·ªïng thanh kho·∫£n tr∆∞·ªõc khi r√∫t: ${ethers.utils.formatUnits(totalLiquidityBefore, 18)}`);
    
    // L·∫•y thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    const userLiquidityBefore = await simpleDex.getBalance(token1Info.tokenAddress, token2Info.tokenAddress, deployer.address);
    console.log(`üë§ Thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng tr∆∞·ªõc khi r√∫t: ${ethers.utils.formatUnits(userLiquidityBefore, 18)}`);
    
    // L·∫•y s·ªë d∆∞ token tr∆∞·ªõc khi r√∫t
    const balance1Before = await token1Contract.balanceOf(deployer.address);
    const balance2Before = await token2Contract.balanceOf(deployer.address);
    console.log(`üí≥ S·ªë d∆∞ token tr∆∞·ªõc khi r√∫t:`);
    console.log(`   ‚Ä¢ ${token1Info.symbol}: ${ethers.utils.formatUnits(balance1Before, token1Info.decimals)}`);
    console.log(`   ‚Ä¢ ${token2Info.symbol}: ${ethers.utils.formatUnits(balance2Before, token2Info.decimals)}`);

    // B∆∞·ªõc 2: Ki·ªÉm tra xem c√≥ thanh kho·∫£n ƒë·ªÉ r√∫t kh√¥ng
    if (userLiquidityBefore.isZero()) {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ thanh kho·∫£n ƒë·ªÉ r√∫t!");
      console.log("üí° Vui l√≤ng th√™m thanh kho·∫£n tr∆∞·ªõc khi test r√∫t");
      
      // L∆∞u k·∫øt qu·∫£ test b·ªè qua
      testResults.testResults.removeLiquidity = {
        status: "skipped", // Tr·∫°ng th√°i: b·ªè qua
        reason: "No liquidity to remove", // L√Ω do b·ªè qua
        userLiquidity: "0", // Thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng
        testTokens: {
          token1: {
            name: token1Name,
            symbol: token1Info.symbol,
            address: token1Info.tokenAddress,
            decimals: token1Info.decimals
          },
          token2: {
            name: token2Name,
            symbol: token2Info.symbol,
            address: token2Info.tokenAddress,
            decimals: token2Info.decimals
          }
        }
      };
    } else {
      // B∆∞·ªõc 3: ƒê·ªãnh nghƒ©a s·ªë l∆∞·ª£ng thanh kho·∫£n s·∫Ω r√∫t
      const removeAmount = ethers.utils.parseUnits("50", 18); // R√∫t 50 liquidity tokens
      
      // Ki·ªÉm tra xem c√≥ ƒë·ªß thanh kho·∫£n ƒë·ªÉ r√∫t kh√¥ng
      if (removeAmount.gt(userLiquidityBefore)) {
        console.log("‚ö†Ô∏è S·ªë l∆∞·ª£ng r√∫t l·ªõn h∆°n thanh kho·∫£n hi·ªán c√≥!");
        console.log(`üí° S·∫Ω r√∫t to√†n b·ªô thanh kho·∫£n: ${ethers.utils.formatUnits(userLiquidityBefore, 18)}`);
        const actualRemoveAmount = userLiquidityBefore; // R√∫t to√†n b·ªô thanh kho·∫£n
      } else {
        const actualRemoveAmount = removeAmount; // R√∫t s·ªë l∆∞·ª£ng ƒë√£ ƒë·ªãnh
      }
      
      const actualRemoveAmount = removeAmount.gt(userLiquidityBefore) ? userLiquidityBefore : removeAmount;
      
      console.log(`üìâ S·ªë l∆∞·ª£ng thanh kho·∫£n s·∫Ω r√∫t: ${ethers.utils.formatUnits(actualRemoveAmount, 18)} liquidity tokens`);

      // B∆∞·ªõc 4: T√≠nh to√°n s·ªë l∆∞·ª£ng token s·∫Ω nh·∫≠n ƒë∆∞·ª£c
      console.log("\nüßÆ ƒêang t√≠nh to√°n s·ªë l∆∞·ª£ng token s·∫Ω nh·∫≠n ƒë∆∞·ª£c...");
      
      // T√≠nh t·ª∑ l·ªá thanh kho·∫£n s·∫Ω r√∫t so v·ªõi t·ªïng thanh kho·∫£n
      const liquidityRatio = actualRemoveAmount.mul(ethers.utils.parseUnits("1", 18)).div(totalLiquidityBefore);
      console.log(`üìä T·ª∑ l·ªá thanh kho·∫£n s·∫Ω r√∫t: ${ethers.utils.formatUnits(liquidityRatio, 18)} (${liquidityRatio.mul(100).div(ethers.utils.parseUnits("1", 18))}%)`);
      
      // T√≠nh s·ªë l∆∞·ª£ng token1 s·∫Ω nh·∫≠n ƒë∆∞·ª£c
      const token1AmountOut = reservesBefore[0].mul(liquidityRatio).div(ethers.utils.parseUnits("1", 18));
      console.log(`üìà S·ªë l∆∞·ª£ng ${token1Info.symbol} s·∫Ω nh·∫≠n: ${ethers.utils.formatUnits(token1AmountOut, token1Info.decimals)}`);
      
      // T√≠nh s·ªë l∆∞·ª£ng token2 s·∫Ω nh·∫≠n ƒë∆∞·ª£c
      const token2AmountOut = reservesBefore[1].mul(liquidityRatio).div(ethers.utils.parseUnits("1", 18));
      console.log(`üìà S·ªë l∆∞·ª£ng ${token2Info.symbol} s·∫Ω nh·∫≠n: ${ethers.utils.formatUnits(token2AmountOut, token2Info.decimals)}`);

      // B∆∞·ªõc 5: Th·ª±c hi·ªán r√∫t thanh kho·∫£n
      console.log("\n‚ûñ ƒêang th·ª±c hi·ªán r√∫t thanh kho·∫£n...");
      const removeLiquidityTx = await simpleDex.removeLiquidity(
        token1Info.tokenAddress,  // ƒê·ªãa ch·ªâ token1
        token2Info.tokenAddress,  // ƒê·ªãa ch·ªâ token2
        actualRemoveAmount,        // S·ªë l∆∞·ª£ng liquidity tokens s·∫Ω r√∫t
        { gasLimit: 300000 }       // Gi·ªõi h·∫°n gas ƒë·ªÉ tr√°nh l·ªói
      );
      
      console.log("‚è≥ Transaction r√∫t thanh kho·∫£n ƒë√£ g·ª≠i:", removeLiquidityTx.hash);
      console.log("‚è≥ ƒêang ch·ªù x√°c nh·∫≠n...");
      
      const receipt = await removeLiquidityTx.wait(); // Ch·ªù transaction ho√†n th√†nh
      console.log("‚úÖ Thanh kho·∫£n ƒë√£ ƒë∆∞·ª£c r√∫t th√†nh c√¥ng!");
      console.log("‚õΩ Gas ƒë√£ s·ª≠ d·ª•ng:", receipt.gasUsed.toString());

      // B∆∞·ªõc 6: Ki·ªÉm tra tr·∫°ng th√°i sau khi r√∫t thanh kho·∫£n
      console.log("\nüîç ƒêang ki·ªÉm tra tr·∫°ng th√°i sau khi r√∫t thanh kho·∫£n...");
      
      // L·∫•y reserves sau khi r√∫t
      const reservesAfter = await simpleDex.getReserves(token1Info.tokenAddress, token2Info.tokenAddress);
      console.log(`üí∞ Reserves sau khi r√∫t:`);
      console.log(`   ‚Ä¢ ${token1Info.symbol}: ${ethers.utils.formatUnits(reservesAfter[0], token1Info.decimals)}`);
      console.log(`   ‚Ä¢ ${token2Info.symbol}: ${ethers.utils.formatUnits(reservesAfter[1], token2Info.decimals)}`);
      
      // L·∫•y t·ªïng thanh kho·∫£n sau khi r√∫t
      const totalLiquidityAfter = await simpleDex.getLiquidity(token1Info.tokenAddress, token2Info.tokenAddress);
      console.log(`üèä T·ªïng thanh kho·∫£n sau khi r√∫t: ${ethers.utils.formatUnits(totalLiquidityAfter, 18)}`);
      
      // L·∫•y thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng sau khi r√∫t
      const userLiquidityAfter = await simpleDex.getBalance(token1Info.tokenAddress, token2Info.tokenAddress, deployer.address);
      console.log(`üë§ Thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng sau khi r√∫t: ${ethers.utils.formatUnits(userLiquidityAfter, 18)}`);
      
      // L·∫•y s·ªë d∆∞ token sau khi r√∫t
      const balance1After = await token1Contract.balanceOf(deployer.address);
      const balance2After = await token2Contract.balanceOf(deployer.address);
      console.log(`üí≥ S·ªë d∆∞ token sau khi r√∫t:`);
      console.log(`   ‚Ä¢ ${token1Info.symbol}: ${ethers.utils.formatUnits(balance1After, token1Info.decimals)}`);
      console.log(`   ‚Ä¢ ${token2Info.symbol}: ${ethers.utils.formatUnits(balance2After, token2Info.decimals)}`);

      // B∆∞·ªõc 7: T√≠nh to√°n thay ƒë·ªïi s·ªë d∆∞
      const balance1Change = balance1After.sub(balance1Before); // S·ªë token1 ƒë√£ nh·∫≠n
      const balance2Change = balance2After.sub(balance2Before); // S·ªë token2 ƒë√£ nh·∫≠n
      const liquidityChange = userLiquidityBefore.sub(userLiquidityAfter); // S·ªë liquidity tokens ƒë√£ m·∫•t

      console.log(`\nüìä Thay ƒë·ªïi s·ªë d∆∞:`);
      console.log(`   ‚Ä¢ ${token1Info.symbol} ƒë√£ nh·∫≠n: ${ethers.utils.formatUnits(balance1Change, token1Info.decimals)}`);
      console.log(`   ‚Ä¢ ${token2Info.symbol} ƒë√£ nh·∫≠n: ${ethers.utils.formatUnits(balance2Change, token2Info.decimals)}`);
      console.log(`   ‚Ä¢ Liquidity tokens ƒë√£ m·∫•t: ${ethers.utils.formatUnits(liquidityChange, 18)}`);

      // B∆∞·ªõc 8: So s√°nh v·ªõi ∆∞·ªõc t√≠nh
      console.log(`\nüìä So s√°nh v·ªõi ∆∞·ªõc t√≠nh:`);
      console.log(`   ‚Ä¢ ${token1Info.symbol} ∆∞·ªõc t√≠nh: ${ethers.utils.formatUnits(token1AmountOut, token1Info.decimals)}`);
      console.log(`   ‚Ä¢ ${token1Info.symbol} th·ª±c t·∫ø: ${ethers.utils.formatUnits(balance1Change, token1Info.decimals)}`);
      console.log(`   ‚Ä¢ ${token2Info.symbol} ∆∞·ªõc t√≠nh: ${ethers.utils.formatUnits(token2AmountOut, token2Info.decimals)}`);
      console.log(`   ‚Ä¢ ${token2Info.symbol} th·ª±c t·∫ø: ${ethers.utils.formatUnits(balance2Change, token2Info.decimals)}`);

      // L∆∞u k·∫øt qu·∫£ test th√†nh c√¥ng
      testResults.testResults.removeLiquidity = {
        status: "passed", // Tr·∫°ng th√°i: th√†nh c√¥ng
        transactionHash: removeLiquidityTx.hash, // Hash c·ªßa transaction
        gasUsed: receipt.gasUsed.toString(), // Gas ƒë√£ s·ª≠ d·ª•ng
        removeDetails: {
          liquidityRemoved: ethers.utils.formatUnits(actualRemoveAmount, 18), // S·ªë l∆∞·ª£ng liquidity tokens ƒë√£ r√∫t
          liquidityRatio: ethers.utils.formatUnits(liquidityRatio, 18), // T·ª∑ l·ªá thanh kho·∫£n ƒë√£ r√∫t
          estimatedToken1: ethers.utils.formatUnits(token1AmountOut, token1Info.decimals), // S·ªë l∆∞·ª£ng token1 ∆∞·ªõc t√≠nh
          estimatedToken2: ethers.utils.formatUnits(token2AmountOut, token2Info.decimals), // S·ªë l∆∞·ª£ng token2 ∆∞·ªõc t√≠nh
          actualToken1: ethers.utils.formatUnits(balance1Change, token1Info.decimals), // S·ªë l∆∞·ª£ng token1 th·ª±c t·∫ø
          actualToken2: ethers.utils.formatUnits(balance2Change, token2Info.decimals)  // S·ªë l∆∞·ª£ng token2 th·ª±c t·∫ø
        },
        reservesBefore: {
          reserve0: ethers.utils.formatUnits(reservesBefore[0], token1Info.decimals), // Reserve token1 tr∆∞·ªõc khi r√∫t
          reserve1: ethers.utils.formatUnits(reservesBefore[1], token2Info.decimals)  // Reserve token2 tr∆∞·ªõc khi r√∫t
        },
        reservesAfter: {
          reserve0: ethers.utils.formatUnits(reservesAfter[0], token1Info.decimals), // Reserve token1 sau khi r√∫t
          reserve1: ethers.utils.formatUnits(reservesAfter[1], token2Info.decimals)  // Reserve token2 sau khi r√∫t
        },
        liquidityChanges: {
          totalBefore: ethers.utils.formatUnits(totalLiquidityBefore, 18), // T·ªïng thanh kho·∫£n tr∆∞·ªõc khi r√∫t
          totalAfter: ethers.utils.formatUnits(totalLiquidityAfter, 18),   // T·ªïng thanh kho·∫£n sau khi r√∫t
          userBefore: ethers.utils.formatUnits(userLiquidityBefore, 18),   // Thanh kho·∫£n ng∆∞·ªùi d√πng tr∆∞·ªõc khi r√∫t
          userAfter: ethers.utils.formatUnits(userLiquidityAfter, 18)      // Thanh kho·∫£n ng∆∞·ªùi d√πng sau khi r√∫t
        },
        balanceChanges: {
          token1Gained: ethers.utils.formatUnits(balance1Change, token1Info.decimals), // S·ªë token1 ƒë√£ nh·∫≠n
          token2Gained: ethers.utils.formatUnits(balance2Change, token2Info.decimals)  // S·ªë token2 ƒë√£ nh·∫≠n
        },
        testTokens: {
          token1: {
            name: token1Name,
            symbol: token1Info.symbol,
            address: token1Info.tokenAddress,
            decimals: token1Info.decimals
          },
          token2: {
            name: token2Name,
            symbol: token2Info.symbol,
            address: token2Info.tokenAddress,
            decimals: token2Info.decimals
          }
        }
      };
    }

  } catch (error: any) {
    // X·ª≠ l√Ω l·ªói n·∫øu c√≥
    console.log("‚ùå R√∫t thanh kho·∫£n th·∫•t b·∫°i:", error.message);
    
    // Hi·ªÉn th·ªã th√¥ng tin l·ªói chi ti·∫øt n·∫øu c√≥
    if (error.transaction) {
      console.log("Transaction hash:", error.transaction.hash);
    }
    
    if (error.receipt) {
      console.log("Gas ƒë√£ s·ª≠ d·ª•ng:", error.receipt.gasUsed.toString());
      console.log("Status:", error.receipt.status);
    }

    // L∆∞u k·∫øt qu·∫£ test th·∫•t b·∫°i
    testResults.testResults.removeLiquidity = {
      status: "failed", // Tr·∫°ng th√°i: th·∫•t b·∫°i
      error: error.message, // Th√¥ng b√°o l·ªói
      testTokens: {
        token1: {
          name: token1Name,
          symbol: token1Info.symbol,
          address: token1Info.tokenAddress,
          decimals: token1Info.decimals
        },
        token2: {
          name: token2Name,
          symbol: token2Info.symbol,
          address: token2Info.tokenAddress,
          decimals: token2Info.decimals
        }
      }
    };
  }

  // ===== L∆ØU K·∫æT QU·∫¢ TEST =====
  console.log("\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ test...");
  
  // T·∫°o th∆∞ m·ª•c info n·∫øu ch∆∞a c√≥
  const infoDir = path.resolve(__dirname, "../info");
  if (!fs.existsSync(infoDir)) {
    fs.mkdirSync(infoDir, { recursive: true });
  }
  
  // L∆∞u k·∫øt qu·∫£ v√†o file JSON
  fs.writeFileSync(
    path.resolve(infoDir, "RemoveLiquidityTest.json"),
    JSON.stringify(testResults, null, 2)
  );

  // ===== HI·ªÇN TH·ªä T·ªîNG K·∫æT =====
  console.log("\n" + "=".repeat(50));
  console.log("‚úÖ HO√ÄN TH√ÄNH TEST R√öT THANH KHO·∫¢N!");
  console.log("=".repeat(50));
  
  if (testResults.testResults.removeLiquidity.status === "passed") {
    console.log("üéâ Test r√∫t thanh kho·∫£n th√†nh c√¥ng!");
    console.log("üìä Thanh kho·∫£n ƒë√£ ƒë∆∞·ª£c r√∫t th√†nh c√¥ng");
    console.log("üí∞ Token ƒë√£ ƒë∆∞·ª£c tr·∫£ v·ªÅ");
    console.log("üìà Reserves ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t");
  } else if (testResults.testResults.removeLiquidity.status === "skipped") {
    console.log("‚ö†Ô∏è Test r√∫t thanh kho·∫£n b·ªã b·ªè qua!");
    console.log("üí° Kh√¥ng c√≥ thanh kho·∫£n ƒë·ªÉ r√∫t");
  } else {
    console.log("‚ùå Test r√∫t thanh kho·∫£n th·∫•t b·∫°i!");
    console.log("üîç Vui l√≤ng ki·ªÉm tra l·ªói v√† th·ª≠ l·∫°i");
  }
  
  console.log("üìÅ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: info/RemoveLiquidityTest.json");
  
  console.log("\nüöÄ B∆Ø·ªöC TI·∫æP THEO:");
  console.log("-".repeat(40));
  console.log("1. Ch·∫°y 05f-test-all-dex-features.ts ƒë·ªÉ test t·∫•t c·∫£ t√≠nh nƒÉng");
  console.log("2. Ho·∫∑c ch·∫°y c√°c script test ri√™ng l·∫ª kh√°c");
}

// Ch·∫°y script ch√≠nh
main().catch(e => {
  console.error("‚ùå L·ªói khi ch·∫°y script:", e);
  process.exit(1);
}); 