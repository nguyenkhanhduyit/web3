import { execSync } from "child_process";
import * as fs from "fs";
import * as path from "path";

/**
 * Script master ƒë·ªÉ deploy to√†n b·ªô h·ªá th·ªëng SimpleDEX
 * Bao g·ªìm:
 * 1. Deploy tokens (BTC, ETH, USDT)
 * 2. Deploy SimpleDEX
 * 3. Approve tokens cho SimpleDEX
 * 4. Th√™m thanh kho·∫£n ban ƒë·∫ßu
 * 5. Test c√°c t√≠nh nƒÉng DEX
 * 6. Deploy advanced features (PriceOracle, LiquidityMining)
 * 7. Deploy Faucet
 * 8. Test swap tokens
 */
async function main() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu deploy to√†n b·ªô h·ªá th·ªëng SimpleDEX...");
    console.log("=".repeat(60));
    
    const startTime = Date.now();
    const deploymentResults: any = {
        startTime: new Date().toISOString(),
        steps: [],
        totalTime: 0,
        status: "completed"
    };
    
    try {
        // B∆∞·ªõc 1: Deploy tokens
        console.log("\nüìã B∆∞·ªõc 1: Deploy tokens (BTC, ETH, USDT)...");
        deploymentResults.steps.push({
            step: 1,
            name: "Deploy Tokens",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/01-deploy-tokens.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 1 ho√†n th√†nh!");
        
        // B∆∞·ªõc 2: Deploy SimpleDEX
        console.log("\nüè¶ B∆∞·ªõc 2: Deploy SimpleDEX contract...");
        deploymentResults.steps.push({
            step: 2,
            name: "Deploy SimpleDEX",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/02-deploy-simple-dex.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 2 ho√†n th√†nh!");
        
        // B∆∞·ªõc 3: Approve tokens
        console.log("\nüîê B∆∞·ªõc 3: Approve tokens cho SimpleDEX...");
        deploymentResults.steps.push({
            step: 3,
            name: "Approve Tokens",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/03-approve-tokens.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 3 ho√†n th√†nh!");
        
        // B∆∞·ªõc 4: Th√™m thanh kho·∫£n ban ƒë·∫ßu
        console.log("\nüíß B∆∞·ªõc 4: Th√™m thanh kho·∫£n ban ƒë·∫ßu...");
        deploymentResults.steps.push({
            step: 4,
            name: "Add Initial Liquidity",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/04-add-initial-liquidity.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 4 ho√†n th√†nh!");
        
        // B∆∞·ªõc 5a: Test tr·∫°ng th√°i ban ƒë·∫ßu
        console.log("\nüîç B∆∞·ªõc 5a: Test tr·∫°ng th√°i ban ƒë·∫ßu...");
        deploymentResults.steps.push({
            step: "5a",
            name: "Test Initial State",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/05a-test-initial-state.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 5a ho√†n th√†nh!");

        // B∆∞·ªõc 5b: Test th√™m thanh kho·∫£n
        console.log("\n‚ûï B∆∞·ªõc 5b: Test th√™m thanh kho·∫£n...");
        deploymentResults.steps.push({
            step: "5b",
            name: "Test Add Liquidity",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/05b-test-add-liquidity.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 5b ho√†n th√†nh!");

        // B∆∞·ªõc 5c: Test swap token1 ‚Üí token2
        console.log("\nüîÑ B∆∞·ªõc 5c: Test swap token1 ‚Üí token2...");
        deploymentResults.steps.push({
            step: "5c",
            name: "Test Swap Token1 to Token2",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/05c-test-swap-token1-to-token2.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 5c ho√†n th√†nh!");

        // B∆∞·ªõc 5d: Test swap token2 ‚Üí token1
        console.log("\nüîÑ B∆∞·ªõc 5d: Test swap token2 ‚Üí token1...");
        deploymentResults.steps.push({
            step: "5d",
            name: "Test Swap Token2 to Token1",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/05d-test-swap-token2-to-token1.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 5d ho√†n th√†nh!");

        // B∆∞·ªõc 5e: Test r√∫t thanh kho·∫£n
        console.log("\n‚ûñ B∆∞·ªõc 5e: Test r√∫t thanh kho·∫£n...");
        deploymentResults.steps.push({
            step: "5e",
            name: "Test Remove Liquidity",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/05e-test-remove-liquidity.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 5e ho√†n th√†nh!");

        // B∆∞·ªõc 5f: Test t·ªïng h·ª£p t·∫•t c·∫£ t√≠nh nƒÉng
        console.log("\nüß™ B∆∞·ªõc 5f: Test t·ªïng h·ª£p t·∫•t c·∫£ t√≠nh nƒÉng...");
        deploymentResults.steps.push({
            step: "5f",
            name: "Test All DEX Features",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/05f-test-all-dex-features.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 5f ho√†n th√†nh!");
        
        // B∆∞·ªõc 6a: Deploy Price Oracle
        console.log("\nüìä B∆∞·ªõc 6a: Deploy Price Oracle...");
        deploymentResults.steps.push({
            step: "6a",
            name: "Deploy Price Oracle",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/06a-deploy-price-oracle.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 6a ho√†n th√†nh!");

        // B∆∞·ªõc 6b: Deploy Liquidity Mining
        console.log("\n‚õèÔ∏è B∆∞·ªõc 6b: Deploy Liquidity Mining...");
        deploymentResults.steps.push({
            step: "6b",
            name: "Deploy Liquidity Mining",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/06b-deploy-liquidity-mining.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 6b ho√†n th√†nh!");

        // B∆∞·ªõc 6c: Test t√≠ch h·ª£p c√°c t√≠nh nƒÉng n√¢ng cao
        console.log("\nüß™ B∆∞·ªõc 6c: Test t√≠ch h·ª£p c√°c t√≠nh nƒÉng n√¢ng cao...");
        deploymentResults.steps.push({
            step: "6c",
            name: "Test Advanced Features Integration",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/06c-test-advanced-features.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 6c ho√†n th√†nh!");
        
        // B∆∞·ªõc 7: Deploy Faucet
        console.log("\nüö∞ B∆∞·ªõc 7: Deploy Faucet contract...");
        deploymentResults.steps.push({
            step: 7,
            name: "Deploy Faucet",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/07-deploy-faucet.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 7 ho√†n th√†nh!");
        
        // B∆∞·ªõc 8: Test swap tokens
        console.log("\nüîÑ B∆∞·ªõc 8: Test swap tokens...");
        deploymentResults.steps.push({
            step: 8,
            name: "Test Swap Tokens",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/08-swap-tokens.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 8 ho√†n th√†nh!");

        console.log("\nüîÑ B∆∞·ªõc 9: Test t√≠nh nƒÉng ∆∞·ªõc l∆∞·ª£ng swap...");
        deploymentResults.steps.push({
            step: 9,
            name: "Test Swap Estimation",
            startTime: new Date().toISOString()
        });
        
        execSync("npx hardhat run scripts/09-test-swap-estimation.ts --network sepolia", { 
            stdio: "inherit",
            cwd: process.cwd()
        });
        
        deploymentResults.steps[deploymentResults.steps.length - 1].endTime = new Date().toISOString();
        deploymentResults.steps[deploymentResults.steps.length - 1].status = "success";
        console.log("‚úÖ B∆∞·ªõc 9 ho√†n th√†nh!");
        
        // ƒê·ªçc th√¥ng tin deployment ƒë·ªÉ t·∫°o b√°o c√°o
        console.log("\nüìä T·∫°o b√°o c√°o deployment...");
        
        const tokenInfo = JSON.parse(fs.readFileSync(path.join(__dirname, "../info/TokenAddress.json"), "utf8"));
        const dexInfo = JSON.parse(fs.readFileSync(path.join(__dirname, "../info/SimpleDEXAddress.json"), "utf8"));
        
        let faucetInfo = null;
        try {
            faucetInfo = JSON.parse(fs.readFileSync(path.join(__dirname, "../info/FaucetInfo.json"), "utf8"));
        } catch (error) {
            console.log("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th√¥ng tin Faucet");
        }
        
        let priceOracleInfo = null;
        try {
            priceOracleInfo = JSON.parse(fs.readFileSync(path.join(__dirname, "../info/PriceOracleDeployment.json"), "utf8"));
        } catch (error) {
            console.log("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th√¥ng tin Price Oracle");
        }

        let liquidityMiningInfo = null;
        try {
            liquidityMiningInfo = JSON.parse(fs.readFileSync(path.join(__dirname, "../info/LiquidityMiningDeployment.json"), "utf8"));
        } catch (error) {
            console.log("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th√¥ng tin Liquidity Mining");
        }

        let advancedFeaturesIntegrationInfo = null;
        try {
            advancedFeaturesIntegrationInfo = JSON.parse(fs.readFileSync(path.join(__dirname, "../info/AdvancedFeaturesIntegrationTest.json"), "utf8"));
        } catch (error) {
            console.log("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th√¥ng tin Advanced Features Integration Test");
        }
        
        // T·∫°o b√°o c√°o t·ªïng h·ª£p
        const finalReport = {
            deploymentSummary: {
                startTime: deploymentResults.startTime,
                endTime: new Date().toISOString(),
                totalTime: Date.now() - startTime,
                status: "completed",
                totalSteps: deploymentResults.steps.length,
                successfulSteps: deploymentResults.steps.filter((s: any) => s.status === "success").length
            },
            deployedContracts: {
                tokens: Object.keys(tokenInfo).map(name => ({
                    name: name,
                    symbol: tokenInfo[name].symbol,
                    address: tokenInfo[name].tokenAddress,
                    decimals: tokenInfo[name].decimals
                })),
                simpleDEX: {
                    address: dexInfo.address,
                    name: "SimpleDEX"
                },
                faucet: faucetInfo ? {
                    address: faucetInfo.faucetAddress,
                    name: "Faucet",
                    supportedTokens: faucetInfo.supportedTokens,
                    cooldownPeriod: faucetInfo.cooldownPeriod
                } : null,
                advancedFeatures: {
                    priceOracle: priceOracleInfo?.priceOracle?.address || null,
                    liquidityMining: liquidityMiningInfo?.liquidityMining?.address || null
                }
            },
            features: [
                "Token Creation (BTC, ETH, USDT)",
                "SimpleDEX with AMM",
                "Liquidity Management",
                "Token Swapping (Exact Input/Output)",
                "Swap Estimation (getAmountOut/getAmountIn)",
                "Price Oracle",
                "Liquidity Mining",
                "Faucet System (24h cooldown)",
                "Modular Script Architecture"
            ],
            usage: {
                deployTokens: "npx hardhat run scripts/01-deploy-tokens.ts --network sepolia",
                deployDEX: "npx hardhat run scripts/02-deploy-simple-dex.ts --network sepolia",
                approveTokens: "npx hardhat run scripts/03-approve-tokens.ts --network sepolia",
                addLiquidity: "npx hardhat run scripts/04-add-initial-liquidity.ts --network sepolia",
                testFeatures: "npx hardhat run scripts/05-test-dex-features.ts --network sepolia",
                deployPriceOracle: "npx hardhat run scripts/06a-deploy-price-oracle.ts --network sepolia",
                deployLiquidityMining: "npx hardhat run scripts/06b-deploy-liquidity-mining.ts --network sepolia",
                testAdvancedIntegration: "npx hardhat run scripts/06c-test-advanced-features.ts --network sepolia",
                deployFaucet: "npx hardhat run scripts/07-deploy-faucet.ts --network sepolia",
                swapTokens: "npx hardhat run scripts/08-swap-tokens.ts --network sepolia",
                testEstimation: "npx hardhat run scripts/09-test-swap-estimation.ts --network sepolia",
                deployAll: "npx hardhat run scripts/00-deploy-everything.ts --network sepolia"
            }
        };
        
        // L∆∞u b√°o c√°o
        const reportPath = path.join(__dirname, "../info/DeploymentReport.json");
        fs.writeFileSync(reportPath, JSON.stringify(finalReport, null, 2));
        
        deploymentResults.endTime = new Date().toISOString();
        deploymentResults.totalTime = Date.now() - startTime;
        
        // L∆∞u k·∫øt qu·∫£ deployment
        const resultsPath = path.join(__dirname, "../info/DeploymentResults.json");
        fs.writeFileSync(resultsPath, JSON.stringify(deploymentResults, null, 2));
        
        console.log("\n" + "=".repeat(60));
        console.log("üéâ DEPLOYMENT HO√ÄN TH√ÄNH TH√ÄNH C√îNG!");
        console.log("=".repeat(60));
        console.log("üìã T√≥m t·∫Øt:");
        console.log(`   ‚è±Ô∏è  T·ªïng th·ªùi gian: ${Math.round((Date.now() - startTime) / 1000)} gi√¢y`);
        console.log(`   ‚úÖ S·ªë b∆∞·ªõc ho√†n th√†nh: ${deploymentResults.steps.filter((s: any) => s.status === "success").length}/${deploymentResults.steps.length}`);
        console.log(`   üè¶ SimpleDEX: ${dexInfo.address}`);
        console.log(`   üö∞ Faucet: ${faucetInfo?.faucetAddress || "N/A"}`);
        console.log(`   üìä B√°o c√°o chi ti·∫øt: info/DeploymentReport.json`);
        console.log("\nüöÄ H·ªá th·ªëng SimpleDEX ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!");
        
    } catch (error: any) {
        console.error("‚ùå Deployment failed:", error);
        deploymentResults.status = "failed";
        deploymentResults.error = error.message;
        deploymentResults.endTime = new Date().toISOString();
        deploymentResults.totalTime = Date.now() - startTime;
        
        const resultsPath = path.join(__dirname, "../info/DeploymentResults.json");
        fs.writeFileSync(resultsPath, JSON.stringify(deploymentResults, null, 2));
        
        process.exit(1);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Script failed:", error);
        process.exit(1);
    }); 