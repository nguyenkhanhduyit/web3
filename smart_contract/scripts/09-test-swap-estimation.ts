import { ethers } from "hardhat";
import * as fs from "fs";
import * as path from "path";

async function main() {
    console.log("=".repeat(60));
    console.log("üöÄ B·∫ÆT ƒê·∫¶U TEST T√çNH NƒÇNG ∆Ø·ªöC L∆Ø·ª¢NG SWAP");
    console.log("=".repeat(60));

    // ƒê·ªçc th√¥ng tin ƒë√£ deploy
    const tokenInfoPath = path.join(__dirname, "../info/TokenAddress.json");
    const dexInfoPath = path.join(__dirname, "../info/SimpleDEXAddress.json");
    
    if (!fs.existsSync(tokenInfoPath) || !fs.existsSync(dexInfoPath)) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin deployment. Vui l√≤ng ch·∫°y script deployment tr∆∞·ªõc.");
        return;
    }

    const tokenInfo = JSON.parse(fs.readFileSync(tokenInfoPath, "utf8"));
    const dexInfo = JSON.parse(fs.readFileSync(dexInfoPath, "utf8"));

    console.log("üìã Th√¥ng tin tokens:");
    console.log(`   BTC: ${tokenInfo.BTC}`);
    console.log(`   ETH: ${tokenInfo.ETH}`);
    console.log(`   USDT: ${tokenInfo.USDT}`);
    console.log(`   SimpleDEX: ${dexInfo.SimpleDEX}`);

    // L·∫•y signer
    const [deployer] = await ethers.getSigners();
    console.log(`\nüë§ Deployer: ${deployer.address}`);

    // L·∫•y contract instances
    const btcToken = await ethers.getContractAt("Token", tokenInfo.BTC);
    const ethToken = await ethers.getContractAt("Token", tokenInfo.ETH);
    const usdtToken = await ethers.getContractAt("Token", tokenInfo.USDT);
    const simpleDEX = await ethers.getContractAt("SimpleDEX", dexInfo.SimpleDEX);

    console.log("\n" + "=".repeat(60));
    console.log("üîç KI·ªÇM TRA TH√îNG TIN POOL");
    console.log("=".repeat(60));

    // Ki·ªÉm tra th√¥ng tin pool BTC-ETH
    console.log("\nüìä Pool BTC-ETH:");
    try {
        const poolInfo = await simpleDEX.getPoolInfo(tokenInfo.BTC, tokenInfo.ETH);
        console.log(`   Reserve BTC: ${ethers.formatUnits(poolInfo.reserve0, 18)} BTC`);
        console.log(`   Reserve ETH: ${ethers.formatUnits(poolInfo.reserve1, 18)} ETH`);
        console.log(`   Total LP Supply: ${ethers.formatUnits(poolInfo.totalSupply, 18)} LP`);
        console.log(`   Gi√° ETH/BTC: ${ethers.formatUnits(poolInfo.price0to1, 18)} ETH/BTC`);
        console.log(`   Gi√° BTC/ETH: ${ethers.formatUnits(poolInfo.price1to0, 18)} BTC/ETH`);
    } catch (error) {
        console.log("   ‚ùå Pool BTC-ETH ch∆∞a c√≥ thanh kho·∫£n");
    }

    // Ki·ªÉm tra th√¥ng tin pool ETH-USDT
    console.log("\nüìä Pool ETH-USDT:");
    try {
        const poolInfo = await simpleDEX.getPoolInfo(tokenInfo.ETH, tokenInfo.USDT);
        console.log(`   Reserve ETH: ${ethers.formatUnits(poolInfo.reserve0, 18)} ETH`);
        console.log(`   Reserve USDT: ${ethers.formatUnits(poolInfo.reserve1, 6)} USDT`);
        console.log(`   Total LP Supply: ${ethers.formatUnits(poolInfo.totalSupply, 18)} LP`);
        console.log(`   Gi√° USDT/ETH: ${ethers.formatUnits(poolInfo.price0to1, 12)} USDT/ETH`);
        console.log(`   Gi√° ETH/USDT: ${ethers.formatUnits(poolInfo.price1to0, 6)} ETH/USDT`);
    } catch (error) {
        console.log("   ‚ùå Pool ETH-USDT ch∆∞a c√≥ thanh kho·∫£n");
    }

    console.log("\n" + "=".repeat(60));
    console.log("üßÆ TEST ∆Ø·ªöC L∆Ø·ª¢NG SWAP");
    console.log("=".repeat(60));

    const estimationResults: any = {
        timestamp: new Date().toISOString(),
        tests: []
    };

    // Test 1: ∆Ø·ªõc l∆∞·ª£ng swap BTC -> ETH
    console.log("\nüîÑ Test 1: ∆Ø·ªõc l∆∞·ª£ng swap BTC -> ETH");
    try {
        const amountIn = ethers.parseUnits("1", 18); // 1 BTC
        const amountOut = await simpleDEX.getAmountOut(tokenInfo.BTC, tokenInfo.ETH, amountIn);
        
        console.log(`   Input: ${ethers.formatUnits(amountIn, 18)} BTC`);
        console.log(`   Output: ${ethers.formatUnits(amountOut, 18)} ETH`);
        console.log(`   T·ª∑ l·ªá: 1 BTC = ${ethers.formatUnits(amountOut, 18)} ETH`);
        
        estimationResults.tests.push({
            test: "BTC -> ETH",
            input: {
                token: "BTC",
                amount: ethers.formatUnits(amountIn, 18)
            },
            output: {
                token: "ETH",
                amount: ethers.formatUnits(amountOut, 18)
            },
            ratio: `${ethers.formatUnits(amountOut, 18)} ETH/BTC`
        });
    } catch (error) {
        console.log("   ‚ùå Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng swap BTC -> ETH");
        estimationResults.tests.push({
            test: "BTC -> ETH",
            error: "Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng"
        });
    }

    // Test 2: ∆Ø·ªõc l∆∞·ª£ng swap ETH -> BTC
    console.log("\nüîÑ Test 2: ∆Ø·ªõc l∆∞·ª£ng swap ETH -> BTC");
    try {
        const amountIn = ethers.parseUnits("10", 18); // 10 ETH
        const amountOut = await simpleDEX.getAmountOut(tokenInfo.ETH, tokenInfo.BTC, amountIn);
        
        console.log(`   Input: ${ethers.formatUnits(amountIn, 18)} ETH`);
        console.log(`   Output: ${ethers.formatUnits(amountOut, 18)} BTC`);
        console.log(`   T·ª∑ l·ªá: 10 ETH = ${ethers.formatUnits(amountOut, 18)} BTC`);
        
        estimationResults.tests.push({
            test: "ETH -> BTC",
            input: {
                token: "ETH",
                amount: ethers.formatUnits(amountIn, 18)
            },
            output: {
                token: "BTC",
                amount: ethers.formatUnits(amountOut, 18)
            },
            ratio: `${ethers.formatUnits(amountOut, 18)} BTC/10 ETH`
        });
    } catch (error) {
        console.log("   ‚ùå Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng swap ETH -> BTC");
        estimationResults.tests.push({
            test: "ETH -> BTC",
            error: "Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng"
        });
    }

    // Test 3: ∆Ø·ªõc l∆∞·ª£ng swap ETH -> USDT
    console.log("\nüîÑ Test 3: ∆Ø·ªõc l∆∞·ª£ng swap ETH -> USDT");
    try {
        const amountIn = ethers.parseUnits("1", 18); // 1 ETH
        const amountOut = await simpleDEX.getAmountOut(tokenInfo.ETH, tokenInfo.USDT, amountIn);
        
        console.log(`   Input: ${ethers.formatUnits(amountIn, 18)} ETH`);
        console.log(`   Output: ${ethers.formatUnits(amountOut, 6)} USDT`);
        console.log(`   T·ª∑ l·ªá: 1 ETH = ${ethers.formatUnits(amountOut, 6)} USDT`);
        
        estimationResults.tests.push({
            test: "ETH -> USDT",
            input: {
                token: "ETH",
                amount: ethers.formatUnits(amountIn, 18)
            },
            output: {
                token: "USDT",
                amount: ethers.formatUnits(amountOut, 6)
            },
            ratio: `${ethers.formatUnits(amountOut, 6)} USDT/ETH`
        });
    } catch (error) {
        console.log("   ‚ùå Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng swap ETH -> USDT");
        estimationResults.tests.push({
            test: "ETH -> USDT",
            error: "Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng"
        });
    }

    console.log("\n" + "=".repeat(60));
    console.log("üéØ TEST ∆Ø·ªöC L∆Ø·ª¢NG INPUT CHO OUTPUT C·ªê ƒê·ªäNH");
    console.log("=".repeat(60));

    // Test 4: ∆Ø·ªõc l∆∞·ª£ng input ƒë·ªÉ nh·∫≠n 1 BTC
    console.log("\nüéØ Test 4: ∆Ø·ªõc l∆∞·ª£ng ETH c·∫ßn b√°n ƒë·ªÉ nh·∫≠n 1 BTC");
    try {
        const amountOut = ethers.parseUnits("1", 18); // 1 BTC
        const amountIn = await simpleDEX.getAmountIn(tokenInfo.ETH, tokenInfo.BTC, amountOut);
        
        console.log(`   Output mong mu·ªën: ${ethers.formatUnits(amountOut, 18)} BTC`);
        console.log(`   Input c·∫ßn thi·∫øt: ${ethers.formatUnits(amountIn, 18)} ETH`);
        console.log(`   T·ª∑ l·ªá: ${ethers.formatUnits(amountIn, 18)} ETH = 1 BTC`);
        
        estimationResults.tests.push({
            test: "ETH -> BTC (exact output)",
            output: {
                token: "BTC",
                amount: ethers.formatUnits(amountOut, 18)
            },
            input: {
                token: "ETH",
                amount: ethers.formatUnits(amountIn, 18)
            },
            ratio: `${ethers.formatUnits(amountIn, 18)} ETH/BTC`
        });
    } catch (error) {
        console.log("   ‚ùå Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng input cho 1 BTC");
        estimationResults.tests.push({
            test: "ETH -> BTC (exact output)",
            error: "Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng"
        });
    }

    // Test 5: ∆Ø·ªõc l∆∞·ª£ng input ƒë·ªÉ nh·∫≠n 1000 USDT
    console.log("\nüéØ Test 5: ∆Ø·ªõc l∆∞·ª£ng ETH c·∫ßn b√°n ƒë·ªÉ nh·∫≠n 1000 USDT");
    try {
        const amountOut = ethers.parseUnits("1000", 6); // 1000 USDT
        const amountIn = await simpleDEX.getAmountIn(tokenInfo.ETH, tokenInfo.USDT, amountOut);
        
        console.log(`   Output mong mu·ªën: ${ethers.formatUnits(amountOut, 6)} USDT`);
        console.log(`   Input c·∫ßn thi·∫øt: ${ethers.formatUnits(amountIn, 18)} ETH`);
        console.log(`   T·ª∑ l·ªá: ${ethers.formatUnits(amountIn, 18)} ETH = 1000 USDT`);
        
        estimationResults.tests.push({
            test: "ETH -> USDT (exact output)",
            output: {
                token: "USDT",
                amount: ethers.formatUnits(amountOut, 6)
            },
            input: {
                token: "ETH",
                amount: ethers.formatUnits(amountIn, 18)
            },
            ratio: `${ethers.formatUnits(amountIn, 18)} ETH/1000 USDT`
        });
    } catch (error) {
        console.log("   ‚ùå Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng input cho 1000 USDT");
        estimationResults.tests.push({
            test: "ETH -> USDT (exact output)",
            error: "Kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng"
        });
    }

    console.log("\n" + "=".repeat(60));
    console.log("üìä SO S√ÅNH ∆Ø·ªöC L∆Ø·ª¢NG V·ªöI TH·ª∞C T·∫æ");
    console.log("=".repeat(60));

    // Test 6: So s√°nh ∆∞·ªõc l∆∞·ª£ng v·ªõi swap th·ª±c t·∫ø
    console.log("\nüîÑ Test 6: So s√°nh ∆∞·ªõc l∆∞·ª£ng v·ªõi swap th·ª±c t·∫ø (ETH -> BTC)");
    try {
        const swapAmount = ethers.parseUnits("0.1", 18); // 0.1 ETH
        
        // ∆Ø·ªõc l∆∞·ª£ng tr∆∞·ªõc
        const estimatedOut = await simpleDEX.getAmountOut(tokenInfo.ETH, tokenInfo.BTC, swapAmount);
        console.log(`   ∆Ø·ªõc l∆∞·ª£ng: ${ethers.formatUnits(swapAmount, 18)} ETH -> ${ethers.formatUnits(estimatedOut, 18)} BTC`);
        
        // Th·ª±c hi·ªán swap th·ª±c t·∫ø
        console.log("   Th·ª±c hi·ªán swap th·ª±c t·∫ø...");
        const tx = await simpleDEX.swapExactTokensForTokens(tokenInfo.ETH, tokenInfo.BTC, swapAmount);
        const receipt = await tx.wait();
        
        // L·∫•y event Swap
        const swapEvent = receipt?.logs.find(log => {
            try {
                const parsed = simpleDEX.interface.parseLog(log);
                return parsed?.name === "Swap";
            } catch {
                return false;
            }
        });
        
        if (swapEvent) {
            const parsed = simpleDEX.interface.parseLog(swapEvent);
            const actualOut = parsed?.args.amountOut;
            console.log(`   Th·ª±c t·∫ø: ${ethers.formatUnits(swapAmount, 18)} ETH -> ${ethers.formatUnits(actualOut, 18)} BTC`);
            console.log(`   Ch√™nh l·ªách: ${ethers.formatUnits(estimatedOut - actualOut, 18)} BTC`);
            console.log(`   ƒê·ªô ch√≠nh x√°c: ${((Number(actualOut) / Number(estimatedOut)) * 100).toFixed(2)}%`);
            
            estimationResults.tests.push({
                test: "So s√°nh ∆∞·ªõc l∆∞·ª£ng vs th·ª±c t·∫ø",
                estimated: ethers.formatUnits(estimatedOut, 18),
                actual: ethers.formatUnits(actualOut, 18),
                difference: ethers.formatUnits(estimatedOut - actualOut, 18),
                accuracy: `${((Number(actualOut) / Number(estimatedOut)) * 100).toFixed(2)}%`
            });
        }
    } catch (error) {
        console.log("   ‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán test so s√°nh");
        estimationResults.tests.push({
            test: "So s√°nh ∆∞·ªõc l∆∞·ª£ng vs th·ª±c t·∫ø",
            error: "Kh√¥ng th·ªÉ th·ª±c hi·ªán"
        });
    }

    // L∆∞u k·∫øt qu·∫£
    const infoDir = path.join(__dirname, "../info");
    if (!fs.existsSync(infoDir)) {
        fs.mkdirSync(infoDir, { recursive: true });
    }

    const resultsPath = path.join(infoDir, "SwapEstimationResults.json");
    fs.writeFileSync(resultsPath, JSON.stringify(estimationResults, null, 2));
    console.log(`\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${resultsPath}`);

    console.log("\n" + "=".repeat(60));
    console.log("‚úÖ HO√ÄN TH√ÄNH TEST T√çNH NƒÇNG ∆Ø·ªöC L∆Ø·ª¢NG SWAP");
    console.log("=".repeat(60));
    console.log("\nüìã T√≥m t·∫Øt:");
    console.log("   ‚úÖ ƒê√£ th√™m h√†m getAmountOut() ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng output");
    console.log("   ‚úÖ ƒê√£ th√™m h√†m getAmountIn() ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng input");
    console.log("   ‚úÖ ƒê√£ th√™m h√†m getPoolInfo() ƒë·ªÉ l·∫•y th√¥ng tin pool");
    console.log("   ‚úÖ ƒê√£ test c√°c t√≠nh nƒÉng ∆∞·ªõc l∆∞·ª£ng");
    console.log("   ‚úÖ ƒê√£ so s√°nh ∆∞·ªõc l∆∞·ª£ng v·ªõi swap th·ª±c t·∫ø");
    console.log("   ‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ test");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå L·ªói:", error);
        process.exit(1);
    }); 