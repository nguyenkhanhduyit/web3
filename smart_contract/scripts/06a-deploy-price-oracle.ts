import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Script tri·ªÉn khai Price Oracle - H·ªá th·ªëng cung c·∫•p gi√° token
 * Ch·ª©c nƒÉng:
 * - Deploy contract PriceOracle
 * - C·∫≠p nh·∫≠t gi√° token
 * - T√≠nh to√°n gi√° t·ª´ reserves c·ªßa pool
 * - L∆∞u th√¥ng tin deployment
 */
async function main() {
  console.log("üöÄ ƒêang tri·ªÉn khai Price Oracle cho SimpleDEX...\n");

  // L·∫•y th√¥ng tin ng∆∞·ªùi deploy (v√≠ ch√≠nh)
  const [deployer] = await ethers.getSigners();
  console.log("üìç ƒê·ªãa ch·ªâ ng∆∞·ªùi deploy:", deployer.address);

  // ƒê·ªçc th√¥ng tin token v√† SimpleDEX ƒë√£ ƒë∆∞·ª£c deploy tr∆∞·ªõc ƒë√≥
  const tokens = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/TokenAddress.json"), "utf8")
  );
  
  const simpleDexAddress = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/SimpleDEXAddress.json"), "utf8")
  ).address;

  // Kh·ªüi t·∫°o object ƒë·ªÉ l∆∞u k·∫øt qu·∫£ deployment
  const deploymentResults = {
    timestamp: new Date().toISOString(),
    priceOracle: {
      status: "pending",
      address: "",
      testResults: {},
      timestamp: new Date().toISOString()
    }
  };

  // ===== TRI·ªÇN KHAI PRICE ORACLE =====
  console.log("\n" + "=".repeat(50));
  console.log("üìä ƒêang tri·ªÉn khai Price Oracle");
  console.log("=".repeat(50));

  try {
    // L·∫•y contract factory cho PriceOracle
    const PriceOracle = await ethers.getContractFactory("PriceOracle");
    
    // Deploy contract PriceOracle
    console.log("‚è≥ ƒêang deploy contract PriceOracle...");
    const priceOracle = await PriceOracle.deploy();
    
    // Ch·ªù contract ƒë∆∞·ª£c deploy ho√†n t·∫•t
    await priceOracle.deployed();

    console.log("‚úÖ PriceOracle ƒë√£ ƒë∆∞·ª£c deploy t·∫°i:", priceOracle.address);

    // ===== KI·ªÇM TRA T√çNH NƒÇNG PRICE ORACLE =====
    console.log("\nüß™ ƒêang ki·ªÉm tra t√≠nh nƒÉng Price Oracle...");

    // L·∫•y th√¥ng tin 2 token ƒë·∫ßu ti√™n ƒë·ªÉ test
    const tokenEntries = Object.entries(tokens);
    const [token1Name, token1Info] = tokenEntries[0]; // Token ƒë·∫ßu ti√™n (v√≠ d·ª•: BTC)
    const [token2Name, token2Info] = tokenEntries[1]; // Token th·ª© hai (v√≠ d·ª•: ETH)

    console.log(`\nüìã Th√¥ng tin token test:`);
    console.log(`Token1: ${token1Name} (${token1Info.symbol}) - ${token1Info.tokenAddress}`);
    console.log(`Token2: ${token2Name} (${token2Info.symbol}) - ${token2Info.tokenAddress}`);

    // C·∫≠p nh·∫≠t gi√° token (v√≠ d·ª•: 1 BTC = 15 ETH)
    const price = ethers.utils.parseEther("15"); // Chuy·ªÉn ƒë·ªïi 15 th√†nh wei
    console.log(`\nüí∞ ƒêang c·∫≠p nh·∫≠t gi√°: 1 ${token1Info.symbol} = 15 ${token2Info.symbol}`);
    
    // G·ªçi h√†m updatePrice ƒë·ªÉ c·∫≠p nh·∫≠t gi√°
    const updatePriceTx = await priceOracle.updatePrice(
      token1Info.tokenAddress, 
      token2Info.tokenAddress, 
      price
    );
    await updatePriceTx.wait();
    console.log("‚úÖ Gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");

    // L·∫•y gi√° ƒë√£ c·∫≠p nh·∫≠t
    console.log(`\nüìà ƒêang l·∫•y gi√° ƒë√£ c·∫≠p nh·∫≠t...`);
    const retrievedPrice = await priceOracle.getPrice(
      token1Info.tokenAddress, 
      token2Info.tokenAddress
    );
    console.log(`üìä Gi√° ƒë√£ l·∫•y: ${ethers.utils.formatEther(retrievedPrice)} ${token2Info.symbol} per ${token1Info.symbol}`);

    // T√≠nh to√°n gi√° t·ª´ reserves c·ªßa pool trong SimpleDEX
    console.log(`\nüßÆ ƒêang t√≠nh to√°n gi√° t·ª´ reserves c·ªßa pool...`);
    
    // L·∫•y contract SimpleDEX ƒë·ªÉ truy c·∫≠p reserves
    const simpleDex = await ethers.getContractAt("SimpleDEX", simpleDexAddress);
    
    // L·∫•y reserves hi·ªán t·∫°i c·ªßa pool
    const reserves = await simpleDex.getReserves(token1Info.tokenAddress, token2Info.tokenAddress);
    console.log(`üìä Reserves hi·ªán t·∫°i:`);
    console.log(`  ${token1Info.symbol}: ${ethers.utils.formatUnits(reserves[0], token1Info.decimals)}`);
    console.log(`  ${token2Info.symbol}: ${ethers.utils.formatUnits(reserves[1], token2Info.decimals)}`);
    
    // T√≠nh to√°n gi√° t·ª´ reserves
    const calculatedPrice = await priceOracle.calculatePriceFromReserves(
      reserves[0],        // Reserve c·ªßa token1
      reserves[1],        // Reserve c·ªßa token2
      token1Info.decimals, // S·ªë th·∫≠p ph√¢n c·ªßa token1
      token2Info.decimals  // S·ªë th·∫≠p ph√¢n c·ªßa token2
    );
    console.log(`üßÆ Gi√° t√≠nh t·ª´ reserves: ${ethers.utils.formatEther(calculatedPrice)} ${token2Info.symbol} per ${token1Info.symbol}`);

    // L∆∞u k·∫øt qu·∫£ test th√†nh c√¥ng
    deploymentResults.priceOracle = {
      status: "success",
      address: priceOracle.address,
      testResults: {
        testPrice: ethers.utils.formatEther(price),
        retrievedPrice: ethers.utils.formatEther(retrievedPrice),
        calculatedPrice: ethers.utils.formatEther(calculatedPrice),
        reserves: {
          token1: ethers.utils.formatUnits(reserves[0], token1Info.decimals),
          token2: ethers.utils.formatUnits(reserves[1], token2Info.decimals)
        }
      },
      timestamp: new Date().toISOString()
    };

    console.log("\n‚úÖ T·∫•t c·∫£ test Price Oracle ƒë√£ th√†nh c√¥ng!");

  } catch (error) {
    console.log("‚ùå Tri·ªÉn khai Price Oracle th·∫•t b·∫°i:", error.message);
    
    // L∆∞u th√¥ng tin l·ªói
    deploymentResults.priceOracle = {
      status: "failed",
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }

  // ===== L∆ØU K·∫æT QU·∫¢ DEPLOYMENT =====
  console.log("\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ deployment...");
  
  // T·∫°o th∆∞ m·ª•c info n·∫øu ch∆∞a c√≥
  const infoDir = path.resolve(__dirname, "../info");
  if (!fs.existsSync(infoDir)) {
    fs.mkdirSync(infoDir, { recursive: true });
  }
  
  // L∆∞u k·∫øt qu·∫£ v√†o file JSON
  fs.writeFileSync(
    path.resolve(infoDir, "PriceOracleDeployment.json"),
    JSON.stringify(deploymentResults, null, 2)
  );

  // ===== HI·ªÇN TH·ªä T·ªîNG K·∫æT =====
  console.log("\n" + "=".repeat(50));
  console.log("üéâ HO√ÄN TH√ÄNH TRI·ªÇN KHAI PRICE ORACLE!");
  console.log("=".repeat(50));
  
  if (deploymentResults.priceOracle.status === "success") {
    console.log("‚úÖ PriceOracle: S·∫µn s√†ng cung c·∫•p gi√° token");
    console.log(`üìç ƒê·ªãa ch·ªâ contract: ${deploymentResults.priceOracle.address}`);
    console.log("üìä K·∫øt qu·∫£ test:");
    console.log(`   ‚Ä¢ Gi√° test: ${deploymentResults.priceOracle.testResults.testPrice} ETH per BTC`);
    console.log(`   ‚Ä¢ Gi√° ƒë√£ l·∫•y: ${deploymentResults.priceOracle.testResults.retrievedPrice} ETH per BTC`);
    console.log(`   ‚Ä¢ Gi√° t·ª´ reserves: ${deploymentResults.priceOracle.testResults.calculatedPrice} ETH per BTC`);
  } else {
    console.log("‚ùå PriceOracle: Tri·ªÉn khai th·∫•t b·∫°i");
    console.log(`üîç L·ªói: ${deploymentResults.priceOracle.error}`);
  }
  
  console.log("üìÅ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: info/PriceOracleDeployment.json");
  
  console.log("\nüöÄ B∆Ø·ªöC TI·∫æP THEO:");
  console.log("-".repeat(40));
  console.log("1. T√≠ch h·ª£p PriceOracle v·ªõi SimpleDEX");
  console.log("2. Th√™m nhi·ªÅu ngu·ªìn gi√° kh√°c nhau");
  console.log("3. X√¢y d·ª±ng frontend ƒë·ªÉ hi·ªÉn th·ªã gi√°");
  console.log("4. Th√™m t√≠nh nƒÉng c·∫≠p nh·∫≠t gi√° t·ª± ƒë·ªông");
}

// Ch·∫°y script ch√≠nh
main().catch(e => {
  console.error("‚ùå L·ªói khi ch·∫°y script:", e);
  process.exit(1);
}); 