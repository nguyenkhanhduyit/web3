import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Script tri·ªÉn khai Liquidity Mining - H·ªá th·ªëng khuy·∫øn kh√≠ch cung c·∫•p thanh kho·∫£n
 * Ch·ª©c nƒÉng:
 * - Deploy contract LiquidityMining
 * - Thi·∫øt l·∫≠p token reward (USDT)
 * - Th√™m pool v√†o ch∆∞∆°ng tr√¨nh mining
 * - T√≠nh to√°n reward rate
 * - L∆∞u th√¥ng tin deployment
 */
async function main() {
  console.log("‚õèÔ∏è ƒêang tri·ªÉn khai Liquidity Mining cho SimpleDEX...\n");

  // L·∫•y th√¥ng tin ng∆∞·ªùi deploy (v√≠ ch√≠nh)
  const [deployer] = await ethers.getSigners();
  console.log("üìç ƒê·ªãa ch·ªâ ng∆∞·ªùi deploy:", deployer.address);

  // ƒê·ªçc th√¥ng tin token v√† SimpleDEX ƒë√£ ƒë∆∞·ª£c deploy tr∆∞·ªõc ƒë√≥
  const tokens = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/TokenAddress.json"), "utf8")
  );
  
  const simpleDexAddress = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/SimpleDEXAddress.json"), "utf8")
  ).address;

  // Kh·ªüi t·∫°o object ƒë·ªÉ l∆∞u k·∫øt qu·∫£ deployment
  const deploymentResults = {
    timestamp: new Date().toISOString(),
    liquidityMining: {
      status: "pending",
      address: "",
      configuration: {},
      testResults: {},
      timestamp: new Date().toISOString()
    }
  };

  // ===== TRI·ªÇN KHAI LIQUIDITY MINING =====
  console.log("\n" + "=".repeat(50));
  console.log("‚õèÔ∏è ƒêang tri·ªÉn khai Liquidity Mining");
  console.log("=".repeat(50));

  try {
    // Thi·∫øt l·∫≠p th√¥ng tin reward token (s·ª≠ d·ª•ng USDT)
    console.log("üéÅ ƒêang thi·∫øt l·∫≠p token reward...");
    const usdtInfo = tokens["Tether USD"];
    const rewardToken = usdtInfo.tokenAddress; // ƒê·ªãa ch·ªâ token USDT
    
    // Thi·∫øt l·∫≠p t·ªïng s·ªë reward v√† th·ªùi gian
    const totalRewards = ethers.utils.parseUnits("10000", usdtInfo.decimals); // 10,000 USDT
    const duration = 30 * 24 * 60 * 60; // 30 ng√†y (t√≠nh b·∫±ng gi√¢y)
    
    console.log(`üí∞ Token reward: ${usdtInfo.symbol} (${rewardToken})`);
    console.log(`üéØ T·ªïng reward: ${ethers.utils.formatUnits(totalRewards, usdtInfo.decimals)} ${usdtInfo.symbol}`);
    console.log(`‚è±Ô∏è Th·ªùi gian: ${duration / (24 * 60 * 60)} ng√†y`);

    // L·∫•y contract factory cho LiquidityMining
    const LiquidityMining = await ethers.getContractFactory("LiquidityMining");
    
    // Deploy contract LiquidityMining v·ªõi c√°c tham s·ªë
    console.log("\n‚è≥ ƒêang deploy contract LiquidityMining...");
    const liquidityMining = await LiquidityMining.deploy(
      rewardToken,    // ƒê·ªãa ch·ªâ token reward
      totalRewards,   // T·ªïng s·ªë reward
      duration        // Th·ªùi gian ch∆∞∆°ng tr√¨nh
    );
    
    // Ch·ªù contract ƒë∆∞·ª£c deploy ho√†n t·∫•t
    await liquidityMining.deployed();

    console.log("‚úÖ LiquidityMining ƒë√£ ƒë∆∞·ª£c deploy t·∫°i:", liquidityMining.address);

    // ===== KI·ªÇM TRA T√çNH NƒÇNG LIQUIDITY MINING =====
    console.log("\nüß™ ƒêang ki·ªÉm tra t√≠nh nƒÉng Liquidity Mining...");

    // L·∫•y th√¥ng tin 2 token ƒë·∫ßu ti√™n ƒë·ªÉ t·∫°o pool mining
    const tokenEntries = Object.entries(tokens);
    const [token1Name, token1Info] = tokenEntries[0]; // Token ƒë·∫ßu ti√™n (v√≠ d·ª•: BTC)
    const [token2Name, token2Info] = tokenEntries[1]; // Token th·ª© hai (v√≠ d·ª•: ETH)

    console.log(`\nüìã Th√¥ng tin pool mining:`);
    console.log(`Pool: ${token1Name}-${token2Name}`);
    console.log(`Token1: ${token1Name} (${token1Info.symbol}) - ${token1Info.tokenAddress}`);
    console.log(`Token2: ${token2Name} (${token2Info.symbol}) - ${token2Info.tokenAddress}`);

    // Thi·∫øt l·∫≠p reward rate cho pool (0.1 USDT m·ªói gi√¢y)
    const rewardRate = ethers.utils.parseUnits("0.1", usdtInfo.decimals);
    console.log(`\nüèä ƒêang th√™m pool v·ªõi reward rate: ${ethers.utils.formatUnits(rewardRate, usdtInfo.decimals)} ${usdtInfo.symbol}/gi√¢y`);
    
    // Th√™m pool v√†o ch∆∞∆°ng tr√¨nh liquidity mining
    const addPoolTx = await liquidityMining.addPool(
      token1Info.tokenAddress, // ƒê·ªãa ch·ªâ token1
      token2Info.tokenAddress, // ƒê·ªãa ch·ªâ token2
      rewardRate               // T·ªëc ƒë·ªô reward
    );
    await addPoolTx.wait();
    console.log("‚úÖ Pool ƒë√£ ƒë∆∞·ª£c th√™m v√†o ch∆∞∆°ng tr√¨nh mining!");

    // L·∫•y th√¥ng tin pool ƒë√£ th√™m
    console.log(`\nüìä ƒêang l·∫•y th√¥ng tin pool...`);
    const poolInfo = await liquidityMining.getPoolInfo(token1Info.tokenAddress);
    console.log(`üìà Th√¥ng tin pool:`);
    console.log(`   ‚Ä¢ Total staked: ${poolInfo.totalStaked}`);
    console.log(`   ‚Ä¢ Reward rate: ${ethers.utils.formatUnits(poolInfo.rewardRate, usdtInfo.decimals)} ${usdtInfo.symbol}/gi√¢y`);
    console.log(`   ‚Ä¢ Last update time: ${new Date(poolInfo.lastUpdateTime * 1000).toLocaleString()}`);

    // T√≠nh to√°n reward h√†ng ng√†y
    const dailyReward = rewardRate * 24 * 60 * 60; // Reward rate * s·ªë gi√¢y trong ng√†y
    const totalDailyReward = dailyReward * tokenPairs.length; // T·ªïng reward cho t·∫•t c·∫£ pool
    
    console.log(`\nüìÖ T√≠nh to√°n reward:`);
    console.log(`   ‚Ä¢ Reward m·ªói ng√†y cho pool n√†y: ${ethers.utils.formatUnits(dailyReward, usdtInfo.decimals)} ${usdtInfo.symbol}`);
    console.log(`   ‚Ä¢ T·ªïng reward m·ªói ng√†y: ${ethers.utils.formatUnits(totalDailyReward, usdtInfo.decimals)} ${usdtInfo.symbol}`);

    // L∆∞u k·∫øt qu·∫£ test th√†nh c√¥ng
    deploymentResults.liquidityMining = {
      status: "success",
      address: liquidityMining.address,
      configuration: {
        rewardToken: {
          symbol: usdtInfo.symbol,
          address: rewardToken,
          totalRewards: ethers.utils.formatUnits(totalRewards, usdtInfo.decimals)
        },
        duration: duration / (24 * 60 * 60), // Chuy·ªÉn v·ªÅ ng√†y
        rewardRate: ethers.utils.formatUnits(rewardRate, usdtInfo.decimals),
        dailyReward: ethers.utils.formatUnits(dailyReward, usdtInfo.decimals)
      },
      testResults: {
        poolAdded: `${token1Name}-${token2Name}`,
        totalStaked: poolInfo.totalStaked.toString(),
        rewardRate: ethers.utils.formatUnits(poolInfo.rewardRate, usdtInfo.decimals),
        lastUpdateTime: new Date(poolInfo.lastUpdateTime * 1000).toISOString()
      },
      timestamp: new Date().toISOString()
    };

    console.log("\n‚úÖ T·∫•t c·∫£ test Liquidity Mining ƒë√£ th√†nh c√¥ng!");

  } catch (error) {
    console.log("‚ùå Tri·ªÉn khai Liquidity Mining th·∫•t b·∫°i:", error.message);
    
    // L∆∞u th√¥ng tin l·ªói
    deploymentResults.liquidityMining = {
      status: "failed",
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }

  // ===== L∆ØU K·∫æT QU·∫¢ DEPLOYMENT =====
  console.log("\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ deployment...");
  
  // T·∫°o th∆∞ m·ª•c info n·∫øu ch∆∞a c√≥
  const infoDir = path.resolve(__dirname, "../info");
  if (!fs.existsSync(infoDir)) {
    fs.mkdirSync(infoDir, { recursive: true });
  }
  
  // L∆∞u k·∫øt qu·∫£ v√†o file JSON
  fs.writeFileSync(
    path.resolve(infoDir, "LiquidityMiningDeployment.json"),
    JSON.stringify(deploymentResults, null, 2)
  );

  // ===== HI·ªÇN TH·ªä T·ªîNG K·∫æT =====
  console.log("\n" + "=".repeat(50));
  console.log("üéâ HO√ÄN TH√ÄNH TRI·ªÇN KHAI LIQUIDITY MINING!");
  console.log("=".repeat(50));
  
  if (deploymentResults.liquidityMining.status === "success") {
    console.log("‚úÖ LiquidityMining: S·∫µn s√†ng khuy·∫øn kh√≠ch cung c·∫•p thanh kho·∫£n");
    console.log(`üìç ƒê·ªãa ch·ªâ contract: ${deploymentResults.liquidityMining.address}`);
    console.log("üìä C·∫•u h√¨nh:");
    console.log(`   ‚Ä¢ Token reward: ${deploymentResults.liquidityMining.configuration.rewardToken.symbol}`);
    console.log(`   ‚Ä¢ T·ªïng reward: ${deploymentResults.liquidityMining.configuration.rewardToken.totalRewards} USDT`);
    console.log(`   ‚Ä¢ Th·ªùi gian: ${deploymentResults.liquidityMining.configuration.duration} ng√†y`);
    console.log(`   ‚Ä¢ Reward rate: ${deploymentResults.liquidityMining.configuration.rewardRate} USDT/gi√¢y`);
    console.log(`   ‚Ä¢ Reward m·ªói ng√†y: ${deploymentResults.liquidityMining.configuration.dailyReward} USDT`);
    console.log("üìà K·∫øt qu·∫£ test:");
    console.log(`   ‚Ä¢ Pool ƒë√£ th√™m: ${deploymentResults.liquidityMining.testResults.poolAdded}`);
    console.log(`   ‚Ä¢ Total staked: ${deploymentResults.liquidityMining.testResults.totalStaked}`);
  } else {
    console.log("‚ùå LiquidityMining: Tri·ªÉn khai th·∫•t b·∫°i");
    console.log(`üîç L·ªói: ${deploymentResults.liquidityMining.error}`);
  }
  
  console.log("üìÅ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: info/LiquidityMiningDeployment.json");
  
  console.log("\nüöÄ B∆Ø·ªöC TI·∫æP THEO:");
  console.log("-".repeat(40));
  console.log("1. K·∫øt n·ªëi LiquidityMining v·ªõi SimpleDEX pools");
  console.log("2. Th√™m nhi·ªÅu pool v√†o ch∆∞∆°ng tr√¨nh mining");
  console.log("3. X√¢y d·ª±ng frontend ƒë·ªÉ staking/unstaking");
  console.log("4. Th√™m t√≠nh nƒÉng claim reward");
  console.log("5. T√≠ch h·ª£p v·ªõi v√≠ ng∆∞·ªùi d√πng");
}

// Ch·∫°y script ch√≠nh
main().catch(e => {
  console.error("‚ùå L·ªói khi ch·∫°y script:", e);
  process.exit(1);
}); 