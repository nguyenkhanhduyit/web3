import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Script ki·ªÉm tra tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa SimpleDEX
 * Ch·ª©c nƒÉng:
 * - Ki·ªÉm tra reserves (d·ª± tr·ªØ) c·ªßa pool
 * - Ki·ªÉm tra t·ªïng thanh kho·∫£n
 * - Ki·ªÉm tra thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng
 * - Ki·ªÉm tra s·ªë d∆∞ token c·ªßa ng∆∞·ªùi d√πng
 * - L∆∞u k·∫øt qu·∫£ ki·ªÉm tra
 */
async function main() {
  console.log("üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa SimpleDEX...\n");

  // ƒê·ªçc th√¥ng tin token ƒë√£ deploy t·ª´ file JSON
  const tokens = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/TokenAddress.json"), "utf8")
  );
  
  // ƒê·ªçc ƒë·ªãa ch·ªâ SimpleDEX ƒë√£ deploy t·ª´ file JSON
  const simpleDexAddress = JSON.parse(
    fs.readFileSync(path.resolve(__dirname, "../info/SimpleDEXAddress.json"), "utf8")
  ).address;

  // L·∫•y th√¥ng tin ng∆∞·ªùi deploy (v√≠ ch√≠nh)
  const [deployer] = await ethers.getSigners();
  
  // Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
  console.log("üìç ƒê·ªãa ch·ªâ ng∆∞·ªùi ki·ªÉm tra:", deployer.address);
  console.log("üè¶ ƒê·ªãa ch·ªâ SimpleDEX:", simpleDexAddress);

  // L·∫•y th√¥ng tin 2 token ƒë·∫ßu ti√™n ƒë·ªÉ test
  const tokenEntries = Object.entries(tokens);
  const [token1Name, token1Info] = tokenEntries[0]; // Token ƒë·∫ßu ti√™n (v√≠ d·ª•: Bitcoin)
  const [token2Name, token2Info] = tokenEntries[1]; // Token th·ª© hai (v√≠ d·ª•: Ethereum)

  console.log(`\nü™ô ƒêang ki·ªÉm tra v·ªõi c·∫∑p token: ${token1Name} (${token1Info.symbol}) & ${token2Name} (${token2Info.symbol})`);

  // L·∫•y contract instance c·ªßa SimpleDEX
  const simpleDex = await ethers.getContractAt("SimpleDEX", simpleDexAddress);

  // T·∫°o contract instance cho token1 v·ªõi c√°c function c·∫ßn thi·∫øt
  const token1Contract = new ethers.Contract(token1Info.tokenAddress, [
    "function balanceOf(address) external view returns (uint256)", // Function ki·ªÉm tra s·ªë d∆∞
    "function approve(address,uint256) external returns (bool)"     // Function ph√™ duy·ªát chi ti√™u
  ], deployer);
  
  // T·∫°o contract instance cho token2 v·ªõi c√°c function c·∫ßn thi·∫øt
  const token2Contract = new ethers.Contract(token2Info.tokenAddress, [
    "function balanceOf(address) external view returns (uint256)", // Function ki·ªÉm tra s·ªë d∆∞
    "function approve(address,uint256) external returns (bool)"     // Function ph√™ duy·ªát chi ti√™u
  ], deployer);

  // Kh·ªüi t·∫°o object ƒë·ªÉ l∆∞u k·∫øt qu·∫£ ki·ªÉm tra
  const testResults: any = {
    timestamp: new Date().toISOString(), // Th·ªùi gian ki·ªÉm tra
    testType: "initial_state_check",     // Lo·∫°i test
    testResults: {}                      // K·∫øt qu·∫£ test s·∫Ω ƒë∆∞·ª£c l∆∞u ·ªü ƒë√¢y
  };

  // ===== KI·ªÇM TRA TR·∫†NG TH√ÅI BAN ƒê·∫¶U =====
  console.log("\n" + "=".repeat(50));
  console.log("üìä KI·ªÇM TRA TR·∫†NG TH√ÅI BAN ƒê·∫¶U");
  console.log("=".repeat(50));

  // L·∫•y th√¥ng tin reserves (d·ª± tr·ªØ) c·ªßa pool
  console.log("üîç ƒêang l·∫•y th√¥ng tin reserves...");
  const reserves = await simpleDex.getReserves(token1Info.tokenAddress, token2Info.tokenAddress);
  
  // L·∫•y t·ªïng thanh kho·∫£n c·ªßa pool
  console.log("üîç ƒêang l·∫•y t·ªïng thanh kho·∫£n...");
  const liquidity = await simpleDex.getLiquidity(token1Info.tokenAddress, token2Info.tokenAddress);
  
  // L·∫•y thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
  console.log("üîç ƒêang l·∫•y thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng...");
  const userLiquidity = await simpleDex.getBalance(token1Info.tokenAddress, token2Info.tokenAddress, deployer.address);
  
  // L·∫•y s·ªë d∆∞ token1 c·ªßa ng∆∞·ªùi d√πng
  console.log("üîç ƒêang l·∫•y s·ªë d∆∞ token1...");
  const balance1 = await token1Contract.balanceOf(deployer.address);
  
  // L·∫•y s·ªë d∆∞ token2 c·ªßa ng∆∞·ªùi d√πng
  console.log("üîç ƒêang l·∫•y s·ªë d∆∞ token2...");
  const balance2 = await token2Contract.balanceOf(deployer.address);

  // Hi·ªÉn th·ªã k·∫øt qu·∫£ ki·ªÉm tra
  console.log(`\nüí∞ Th√¥ng tin Reserves (D·ª± tr·ªØ):`);
  console.log(`   ‚Ä¢ ${token1Info.symbol}: ${ethers.utils.formatUnits(reserves[0], token1Info.decimals)}`);
  console.log(`   ‚Ä¢ ${token2Info.symbol}: ${ethers.utils.formatUnits(reserves[1], token2Info.decimals)}`);
  
  console.log(`\nüèä Th√¥ng tin Thanh kho·∫£n:`);
  console.log(`   ‚Ä¢ T·ªïng thanh kho·∫£n: ${ethers.utils.formatUnits(liquidity, 18)}`);
  console.log(`   ‚Ä¢ Thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng: ${ethers.utils.formatUnits(userLiquidity, 18)}`);
  
  console.log(`\nüí≥ S·ªë d∆∞ Token c·ªßa ng∆∞·ªùi d√πng:`);
  console.log(`   ‚Ä¢ ${token1Info.symbol}: ${ethers.utils.formatUnits(balance1, token1Info.decimals)}`);
  console.log(`   ‚Ä¢ ${token2Info.symbol}: ${ethers.utils.formatUnits(balance2, token2Info.decimals)}`);

  // L∆∞u k·∫øt qu·∫£ ki·ªÉm tra v√†o object
  testResults.testResults.initialState = {
    status: "passed", // Tr·∫°ng th√°i: th√†nh c√¥ng
    reserves: {
      reserve0: ethers.utils.formatUnits(reserves[0], token1Info.decimals), // Reserve c·ªßa token1
      reserve1: ethers.utils.formatUnits(reserves[1], token2Info.decimals)  // Reserve c·ªßa token2
    },
    liquidity: {
      total: ethers.utils.formatUnits(liquidity, 18),     // T·ªïng thanh kho·∫£n
      user: ethers.utils.formatUnits(userLiquidity, 18)   // Thanh kho·∫£n c·ªßa ng∆∞·ªùi d√πng
    },
    userBalance: {
      token0: ethers.utils.formatUnits(balance1, token1Info.decimals), // S·ªë d∆∞ token1
      token1: ethers.utils.formatUnits(balance2, token2Info.decimals)  // S·ªë d∆∞ token2
    },
    testTokens: {
      token1: {
        name: token1Name,
        symbol: token1Info.symbol,
        address: token1Info.tokenAddress,
        decimals: token1Info.decimals
      },
      token2: {
        name: token2Name,
        symbol: token2Info.symbol,
        address: token2Info.tokenAddress,
        decimals: token2Info.decimals
      }
    }
  };

  // ===== L∆ØU K·∫æT QU·∫¢ KI·ªÇM TRA =====
  console.log("\nüíæ ƒêang l∆∞u k·∫øt qu·∫£ ki·ªÉm tra...");
  
  // T·∫°o th∆∞ m·ª•c info n·∫øu ch∆∞a c√≥
  const infoDir = path.resolve(__dirname, "../info");
  if (!fs.existsSync(infoDir)) {
    fs.mkdirSync(infoDir, { recursive: true });
  }
  
  // L∆∞u k·∫øt qu·∫£ v√†o file JSON
  fs.writeFileSync(
    path.resolve(infoDir, "InitialStateTest.json"),
    JSON.stringify(testResults, null, 2)
  );

  // ===== HI·ªÇN TH·ªä T·ªîNG K·∫æT =====
  console.log("\n" + "=".repeat(50));
  console.log("‚úÖ HO√ÄN TH√ÄNH KI·ªÇM TRA TR·∫†NG TH√ÅI BAN ƒê·∫¶U!");
  console.log("=".repeat(50));
  console.log("üìÅ K·∫øt qu·∫£ ƒë√£ l∆∞u v√†o: info/InitialStateTest.json");
  console.log("üîç Tr·∫°ng th√°i SimpleDEX ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra th√†nh c√¥ng!");
  console.log("üìä T·∫•t c·∫£ th√¥ng tin reserves, liquidity v√† balance ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n");
  
  console.log("\nüöÄ B∆Ø·ªöC TI·∫æP THEO:");
  console.log("-".repeat(40));
  console.log("1. Ch·∫°y 05b-test-add-liquidity.ts ƒë·ªÉ th√™m thanh kho·∫£n");
  console.log("2. Ch·∫°y 05c-test-swap-token1-to-token2.ts ƒë·ªÉ test swap");
  console.log("3. Ch·∫°y 05d-test-swap-token2-to-token1.ts ƒë·ªÉ test swap ng∆∞·ª£c");
  console.log("4. Ch·∫°y 05e-test-remove-liquidity.ts ƒë·ªÉ test r√∫t thanh kho·∫£n");
  console.log("5. Ho·∫∑c ch·∫°y 05f-test-all-dex-features.ts ƒë·ªÉ test t·∫•t c·∫£");
}

// Ch·∫°y script ch√≠nh
main().catch(e => {
  console.error("‚ùå L·ªói khi ch·∫°y script:", e);
  process.exit(1);
}); 